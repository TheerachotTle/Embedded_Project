
Embedded_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08005574  08005574  00015574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055c8  080055c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080055c8  080055c8  000155c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055d0  080055d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055d0  080055d0  000155d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055d4  080055d4  000155d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080055d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000588  20000070  08005648  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  08005648  000205f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bd8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000226a  00000000  00000000  00030c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00032ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  00033cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020d4  00000000  00000000  000349c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff07  00000000  00000000  00036a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000995ca  00000000  00000000  000469a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dff6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f04  00000000  00000000  000dffc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800555c 	.word	0x0800555c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800555c 	.word	0x0800555c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b96e 	b.w	8000d60 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468c      	mov	ip, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f040 8083 	bne.w	8000bb2 <__udivmoddi4+0x116>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4617      	mov	r7, r2
 8000ab0:	d947      	bls.n	8000b42 <__udivmoddi4+0xa6>
 8000ab2:	fab2 f282 	clz	r2, r2
 8000ab6:	b142      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab8:	f1c2 0020 	rsb	r0, r2, #32
 8000abc:	fa24 f000 	lsr.w	r0, r4, r0
 8000ac0:	4091      	lsls	r1, r2
 8000ac2:	4097      	lsls	r7, r2
 8000ac4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ad4:	fa1f fe87 	uxth.w	lr, r7
 8000ad8:	fb08 c116 	mls	r1, r8, r6, ip
 8000adc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aee:	f080 8119 	bcs.w	8000d24 <__udivmoddi4+0x288>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8116 	bls.w	8000d24 <__udivmoddi4+0x288>
 8000af8:	3e02      	subs	r6, #2
 8000afa:	443b      	add	r3, r7
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b04:	fb08 3310 	mls	r3, r8, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b10:	45a6      	cmp	lr, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	193c      	adds	r4, r7, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1a:	f080 8105 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000b1e:	45a6      	cmp	lr, r4
 8000b20:	f240 8102 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000b24:	3802      	subs	r0, #2
 8000b26:	443c      	add	r4, r7
 8000b28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b2c:	eba4 040e 	sub.w	r4, r4, lr
 8000b30:	2600      	movs	r6, #0
 8000b32:	b11d      	cbz	r5, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c5 4300 	strd	r4, r3, [r5]
 8000b3c:	4631      	mov	r1, r6
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	b902      	cbnz	r2, 8000b46 <__udivmoddi4+0xaa>
 8000b44:	deff      	udf	#255	; 0xff
 8000b46:	fab2 f282 	clz	r2, r2
 8000b4a:	2a00      	cmp	r2, #0
 8000b4c:	d150      	bne.n	8000bf0 <__udivmoddi4+0x154>
 8000b4e:	1bcb      	subs	r3, r1, r7
 8000b50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b54:	fa1f f887 	uxth.w	r8, r7
 8000b58:	2601      	movs	r6, #1
 8000b5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b5e:	0c21      	lsrs	r1, r4, #16
 8000b60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b68:	fb08 f30c 	mul.w	r3, r8, ip
 8000b6c:	428b      	cmp	r3, r1
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000b70:	1879      	adds	r1, r7, r1
 8000b72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0xe2>
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	f200 80e9 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000b7e:	4684      	mov	ip, r0
 8000b80:	1ac9      	subs	r1, r1, r3
 8000b82:	b2a3      	uxth	r3, r4
 8000b84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b90:	fb08 f800 	mul.w	r8, r8, r0
 8000b94:	45a0      	cmp	r8, r4
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x10c>
 8000b98:	193c      	adds	r4, r7, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x10a>
 8000ba0:	45a0      	cmp	r8, r4
 8000ba2:	f200 80d9 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	eba4 0408 	sub.w	r4, r4, r8
 8000bac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bb0:	e7bf      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d909      	bls.n	8000bca <__udivmoddi4+0x12e>
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	f000 80b1 	beq.w	8000d1e <__udivmoddi4+0x282>
 8000bbc:	2600      	movs	r6, #0
 8000bbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	4631      	mov	r1, r6
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	fab3 f683 	clz	r6, r3
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d14a      	bne.n	8000c68 <__udivmoddi4+0x1cc>
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0x140>
 8000bd6:	4282      	cmp	r2, r0
 8000bd8:	f200 80b8 	bhi.w	8000d4c <__udivmoddi4+0x2b0>
 8000bdc:	1a84      	subs	r4, r0, r2
 8000bde:	eb61 0103 	sbc.w	r1, r1, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	468c      	mov	ip, r1
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d0a8      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000bea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bee:	e7a5      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000bf0:	f1c2 0320 	rsb	r3, r2, #32
 8000bf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000bf8:	4097      	lsls	r7, r2
 8000bfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000bfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c02:	40d9      	lsrs	r1, r3
 8000c04:	4330      	orrs	r0, r6
 8000c06:	0c03      	lsrs	r3, r0, #16
 8000c08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c0c:	fa1f f887 	uxth.w	r8, r7
 8000c10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c18:	fb06 f108 	mul.w	r1, r6, r8
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x19c>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c2a:	f080 808d 	bcs.w	8000d48 <__udivmoddi4+0x2ac>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 808a 	bls.w	8000d48 <__udivmoddi4+0x2ac>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b281      	uxth	r1, r0
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c48:	fb00 f308 	mul.w	r3, r0, r8
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x1c4>
 8000c50:	1879      	adds	r1, r7, r1
 8000c52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c56:	d273      	bcs.n	8000d40 <__udivmoddi4+0x2a4>
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d971      	bls.n	8000d40 <__udivmoddi4+0x2a4>
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	4439      	add	r1, r7
 8000c60:	1acb      	subs	r3, r1, r3
 8000c62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c66:	e778      	b.n	8000b5a <__udivmoddi4+0xbe>
 8000c68:	f1c6 0c20 	rsb	ip, r6, #32
 8000c6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c74:	431c      	orrs	r4, r3
 8000c76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c86:	431f      	orrs	r7, r3
 8000c88:	0c3b      	lsrs	r3, r7, #16
 8000c8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c8e:	fa1f f884 	uxth.w	r8, r4
 8000c92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c9e:	458a      	cmp	sl, r1
 8000ca0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ca4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0x220>
 8000caa:	1861      	adds	r1, r4, r1
 8000cac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cb0:	d248      	bcs.n	8000d44 <__udivmoddi4+0x2a8>
 8000cb2:	458a      	cmp	sl, r1
 8000cb4:	d946      	bls.n	8000d44 <__udivmoddi4+0x2a8>
 8000cb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cba:	4421      	add	r1, r4
 8000cbc:	eba1 010a 	sub.w	r1, r1, sl
 8000cc0:	b2bf      	uxth	r7, r7
 8000cc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cce:	fb00 f808 	mul.w	r8, r0, r8
 8000cd2:	45b8      	cmp	r8, r7
 8000cd4:	d907      	bls.n	8000ce6 <__udivmoddi4+0x24a>
 8000cd6:	19e7      	adds	r7, r4, r7
 8000cd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cdc:	d22e      	bcs.n	8000d3c <__udivmoddi4+0x2a0>
 8000cde:	45b8      	cmp	r8, r7
 8000ce0:	d92c      	bls.n	8000d3c <__udivmoddi4+0x2a0>
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	4427      	add	r7, r4
 8000ce6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cea:	eba7 0708 	sub.w	r7, r7, r8
 8000cee:	fba0 8902 	umull	r8, r9, r0, r2
 8000cf2:	454f      	cmp	r7, r9
 8000cf4:	46c6      	mov	lr, r8
 8000cf6:	4649      	mov	r1, r9
 8000cf8:	d31a      	bcc.n	8000d30 <__udivmoddi4+0x294>
 8000cfa:	d017      	beq.n	8000d2c <__udivmoddi4+0x290>
 8000cfc:	b15d      	cbz	r5, 8000d16 <__udivmoddi4+0x27a>
 8000cfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000d02:	eb67 0701 	sbc.w	r7, r7, r1
 8000d06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d0a:	40f2      	lsrs	r2, r6
 8000d0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d10:	40f7      	lsrs	r7, r6
 8000d12:	e9c5 2700 	strd	r2, r7, [r5]
 8000d16:	2600      	movs	r6, #0
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e70b      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e9      	b.n	8000afc <__udivmoddi4+0x60>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6fd      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d2c:	4543      	cmp	r3, r8
 8000d2e:	d2e5      	bcs.n	8000cfc <__udivmoddi4+0x260>
 8000d30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d34:	eb69 0104 	sbc.w	r1, r9, r4
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7df      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e7d2      	b.n	8000ce6 <__udivmoddi4+0x24a>
 8000d40:	4660      	mov	r0, ip
 8000d42:	e78d      	b.n	8000c60 <__udivmoddi4+0x1c4>
 8000d44:	4681      	mov	r9, r0
 8000d46:	e7b9      	b.n	8000cbc <__udivmoddi4+0x220>
 8000d48:	4666      	mov	r6, ip
 8000d4a:	e775      	b.n	8000c38 <__udivmoddi4+0x19c>
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	e74a      	b.n	8000be6 <__udivmoddi4+0x14a>
 8000d50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d54:	4439      	add	r1, r7
 8000d56:	e713      	b.n	8000b80 <__udivmoddi4+0xe4>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	443c      	add	r4, r7
 8000d5c:	e724      	b.n	8000ba8 <__udivmoddi4+0x10c>
 8000d5e:	bf00      	nop

08000d60 <__aeabi_idiv0>:
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <store_char>:
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d76:	3301      	adds	r3, #1
 8000d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d7c:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d009      	beq.n	8000d9e <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d90:	683a      	ldr	r2, [r7, #0]
 8000d92:	79f9      	ldrb	r1, [r7, #7]
 8000d94:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8000d9e:	bf00      	nop
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <Uart_isr>:
	if (so_far == len) return 1;
	else return -1;
}

void Uart_isr (UART_HandleTypeDef *huart)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	f003 0320 	and.w	r3, r3, #32
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d023      	beq.n	8000e16 <Uart_isr+0x6a>
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	f003 0320 	and.w	r3, r3, #32
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d01e      	beq.n	8000e16 <Uart_isr+0x6a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a3f      	ldr	r2, [pc, #252]	; (8000ee8 <Uart_isr+0x13c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d107      	bne.n	8000dfe <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 8000dee:	4b3f      	ldr	r3, [pc, #252]	; (8000eec <Uart_isr+0x140>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ffb4 	bl	8000d64 <store_char>
        else if (huart == pc_uart)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 8000dfc:	e06d      	b.n	8000eda <Uart_isr+0x12e>
        else if (huart == pc_uart)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a3b      	ldr	r2, [pc, #236]	; (8000ef0 <Uart_isr+0x144>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d169      	bne.n	8000eda <Uart_isr+0x12e>
           	store_char (c, _rx_buffer2);  // store data in buffer
 8000e06:	4b3b      	ldr	r3, [pc, #236]	; (8000ef4 <Uart_isr+0x148>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ffa8 	bl	8000d64 <store_char>
        return;
 8000e14:	e061      	b.n	8000eda <Uart_isr+0x12e>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d05f      	beq.n	8000ee0 <Uart_isr+0x134>
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d05a      	beq.n	8000ee0 <Uart_isr+0x134>
    {
    	if (huart == device_uart){
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a2e      	ldr	r2, [pc, #184]	; (8000ee8 <Uart_isr+0x13c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d127      	bne.n	8000e82 <Uart_isr+0xd6>
    	if(tx_buffer1.head == tx_buffer1.tail)
 8000e32:	4b31      	ldr	r3, [pc, #196]	; (8000ef8 <Uart_isr+0x14c>)
 8000e34:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000e38:	4b2f      	ldr	r3, [pc, #188]	; (8000ef8 <Uart_isr+0x14c>)
 8000e3a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d108      	bne.n	8000e54 <Uart_isr+0xa8>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	68da      	ldr	r2, [r3, #12]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e50:	60da      	str	r2, [r3, #12]
        	      huart->Instance->SR;
        	      huart->Instance->DR = c;

        	    }
        	}
    	return;
 8000e52:	e044      	b.n	8000ede <Uart_isr+0x132>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8000e54:	4b28      	ldr	r3, [pc, #160]	; (8000ef8 <Uart_isr+0x14c>)
 8000e56:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e5a:	4a27      	ldr	r2, [pc, #156]	; (8000ef8 <Uart_isr+0x14c>)
 8000e5c:	5cd3      	ldrb	r3, [r2, r3]
 8000e5e:	737b      	strb	r3, [r7, #13]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8000e60:	4b25      	ldr	r3, [pc, #148]	; (8000ef8 <Uart_isr+0x14c>)
 8000e62:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e66:	3301      	adds	r3, #1
 8000e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e6c:	4a22      	ldr	r2, [pc, #136]	; (8000ef8 <Uart_isr+0x14c>)
 8000e6e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	7b7a      	ldrb	r2, [r7, #13]
 8000e7e:	605a      	str	r2, [r3, #4]
    	return;
 8000e80:	e02d      	b.n	8000ede <Uart_isr+0x132>
    	else if (huart == pc_uart){
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a1a      	ldr	r2, [pc, #104]	; (8000ef0 <Uart_isr+0x144>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d129      	bne.n	8000ede <Uart_isr+0x132>
        	if(tx_buffer2.head == tx_buffer2.tail)
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <Uart_isr+0x150>)
 8000e8c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <Uart_isr+0x150>)
 8000e92:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d108      	bne.n	8000eac <Uart_isr+0x100>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	68da      	ldr	r2, [r3, #12]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ea8:	60da      	str	r2, [r3, #12]
    	return;
 8000eaa:	e018      	b.n	8000ede <Uart_isr+0x132>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <Uart_isr+0x150>)
 8000eae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000eb2:	4a12      	ldr	r2, [pc, #72]	; (8000efc <Uart_isr+0x150>)
 8000eb4:	5cd3      	ldrb	r3, [r2, r3]
 8000eb6:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8000eb8:	4b10      	ldr	r3, [pc, #64]	; (8000efc <Uart_isr+0x150>)
 8000eba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	; (8000efc <Uart_isr+0x150>)
 8000ec6:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	      huart->Instance->SR;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	7bba      	ldrb	r2, [r7, #14]
 8000ed6:	605a      	str	r2, [r3, #4]
    	return;
 8000ed8:	e001      	b.n	8000ede <Uart_isr+0x132>
        return;
 8000eda:	bf00      	nop
 8000edc:	e000      	b.n	8000ee0 <Uart_isr+0x134>
    	return;
 8000ede:	bf00      	nop
    }
}
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000514 	.word	0x20000514
 8000eec:	200004bc 	.word	0x200004bc
 8000ef0:	200005a0 	.word	0x200005a0
 8000ef4:	200004c4 	.word	0x200004c4
 8000ef8:	2000008c 	.word	0x2000008c
 8000efc:	20000294 	.word	0x20000294

08000f00 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char uart_recv;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	 if(huart==&huart1){
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <HAL_UART_RxCpltCallback+0x40>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d113      	bne.n	8000f38 <HAL_UART_RxCpltCallback+0x38>
		 if(uart_recv==1){
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <HAL_UART_RxCpltCallback+0x44>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d105      	bne.n	8000f24 <HAL_UART_RxCpltCallback+0x24>
		 		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2120      	movs	r1, #32
 8000f1c:	480a      	ldr	r0, [pc, #40]	; (8000f48 <HAL_UART_RxCpltCallback+0x48>)
 8000f1e:	f001 fca7 	bl	8002870 <HAL_GPIO_WritePin>
 8000f22:	e004      	b.n	8000f2e <HAL_UART_RxCpltCallback+0x2e>
		 }else{
		 		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2120      	movs	r1, #32
 8000f28:	4807      	ldr	r0, [pc, #28]	; (8000f48 <HAL_UART_RxCpltCallback+0x48>)
 8000f2a:	f001 fca1 	bl	8002870 <HAL_GPIO_WritePin>
		 }
		 HAL_UART_Receive_IT(&huart1,&uart_recv,1);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4904      	ldr	r1, [pc, #16]	; (8000f44 <HAL_UART_RxCpltCallback+0x44>)
 8000f32:	4803      	ldr	r0, [pc, #12]	; (8000f40 <HAL_UART_RxCpltCallback+0x40>)
 8000f34:	f002 ffc9 	bl	8003eca <HAL_UART_Receive_IT>
	 }
 }
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000514 	.word	0x20000514
 8000f44:	200004c8 	.word	0x200004c8
 8000f48:	40020000 	.word	0x40020000

08000f4c <delay>:
void delay(uint16_t time){
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <delay+0x30>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER (&htim1)<time);
 8000f5e:	bf00      	nop
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <delay+0x30>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d3f9      	bcc.n	8000f60 <delay+0x14>
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000558 	.word	0x20000558

08000f80 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PORT GPIOC

// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	7f1b      	ldrb	r3, [r3, #28]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	f040 8083 	bne.w	8001098 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000f92:	4b45      	ldr	r3, [pc, #276]	; (80010a8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d11a      	bne.n	8000fd0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f002 fc03 	bl	80037a8 <HAL_TIM_ReadCapturedValue>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a41      	ldr	r2, [pc, #260]	; (80010ac <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000fa6:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000fa8:	4b3f      	ldr	r3, [pc, #252]	; (80010a8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6a1a      	ldr	r2, [r3, #32]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 020a 	bic.w	r2, r2, #10
 8000fbc:	621a      	str	r2, [r3, #32]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6a1a      	ldr	r2, [r3, #32]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f042 0202 	orr.w	r2, r2, #2
 8000fcc:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000fce:	e063      	b.n	8001098 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000fd0:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d15f      	bne.n	8001098 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000fd8:	2100      	movs	r1, #0
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f002 fbe4 	bl	80037a8 <HAL_TIM_ReadCapturedValue>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	4a33      	ldr	r2, [pc, #204]	; (80010b0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000fe4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000fee:	4b30      	ldr	r3, [pc, #192]	; (80010b0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4b2e      	ldr	r3, [pc, #184]	; (80010ac <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d907      	bls.n	800100a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000ffa:	4b2d      	ldr	r3, [pc, #180]	; (80010b0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	4a2b      	ldr	r2, [pc, #172]	; (80010b4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	e00f      	b.n	800102a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 800100a:	4b28      	ldr	r3, [pc, #160]	; (80010ac <HAL_TIM_IC_CaptureCallback+0x12c>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4b28      	ldr	r3, [pc, #160]	; (80010b0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	429a      	cmp	r2, r3
 8001014:	d909      	bls.n	800102a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001016:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4b24      	ldr	r3, [pc, #144]	; (80010ac <HAL_TIM_IC_CaptureCallback+0x12c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001024:	33ff      	adds	r3, #255	; 0xff
 8001026:	4a23      	ldr	r2, [pc, #140]	; (80010b4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001028:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 800102a:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fa70 	bl	8000514 <__aeabi_ui2d>
 8001034:	a31a      	add	r3, pc, #104	; (adr r3, 80010a0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103a:	f7ff fae5 	bl	8000608 <__aeabi_dmul>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4610      	mov	r0, r2
 8001044:	4619      	mov	r1, r3
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800104e:	f7ff fc05 	bl	800085c <__aeabi_ddiv>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	f7ff fce7 	bl	8000a2c <__aeabi_d2uiz>
 800105e:	4603      	mov	r3, r0
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001064:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6a1a      	ldr	r2, [r3, #32]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 020a 	bic.w	r2, r2, #10
 800107a:	621a      	str	r2, [r3, #32]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6a12      	ldr	r2, [r2, #32]
 8001086:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <HAL_TIM_IC_CaptureCallback+0x13c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	68da      	ldr	r2, [r3, #12]
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0202 	bic.w	r2, r2, #2
 8001096:	60da      	str	r2, [r3, #12]
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	b020c49c 	.word	0xb020c49c
 80010a4:	3fa16872 	.word	0x3fa16872
 80010a8:	200004a8 	.word	0x200004a8
 80010ac:	2000049c 	.word	0x2000049c
 80010b0:	200004a0 	.word	0x200004a0
 80010b4:	200004a4 	.word	0x200004a4
 80010b8:	200004a9 	.word	0x200004a9
 80010bc:	20000558 	.word	0x20000558

080010c0 <HCSR04_Read>:
void HCSR04_Read (void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ca:	480b      	ldr	r0, [pc, #44]	; (80010f8 <HCSR04_Read+0x38>)
 80010cc:	f001 fbd0 	bl	8002870 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 80010d0:	200a      	movs	r0, #10
 80010d2:	f7ff ff3b 	bl	8000f4c <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010dc:	4806      	ldr	r0, [pc, #24]	; (80010f8 <HCSR04_Read+0x38>)
 80010de:	f001 fbc7 	bl	8002870 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HCSR04_Read+0x3c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68da      	ldr	r2, [r3, #12]
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <HCSR04_Read+0x3c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f042 0202 	orr.w	r2, r2, #2
 80010f0:	60da      	str	r2, [r3, #12]
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40020800 	.word	0x40020800
 80010fc:	20000558 	.word	0x20000558

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001106:	f000 fc37 	bl	8001978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110a:	f000 f855 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110e:	f000 f9b7 	bl	8001480 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001112:	f000 f98b 	bl	800142c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001116:	f000 f909 	bl	800132c <MX_TIM1_Init>
  MX_ADC1_Init();
 800111a:	f000 f8b5 	bl	8001288 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800111e:	f000 f95b 	bl	80013d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&uart_recv,1);
 8001122:	2201      	movs	r2, #1
 8001124:	491c      	ldr	r1, [pc, #112]	; (8001198 <main+0x98>)
 8001126:	481d      	ldr	r0, [pc, #116]	; (800119c <main+0x9c>)
 8001128:	f002 fecf 	bl	8003eca <HAL_UART_Receive_IT>
  HAL_TIM_IC_Start_IT(&htim1,TIM_CHANNEL_1);
 800112c:	2100      	movs	r1, #0
 800112e:	481c      	ldr	r0, [pc, #112]	; (80011a0 <main+0xa0>)
 8001130:	f002 f87c 	bl	800322c <HAL_TIM_IC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HCSR04_Read();
 8001134:	f7ff ffc4 	bl	80010c0 <HCSR04_Read>
	  HAL_ADC_Start(&hadc1);
 8001138:	481a      	ldr	r0, [pc, #104]	; (80011a4 <main+0xa4>)
 800113a:	f000 fcf7 	bl	8001b2c <HAL_ADC_Start>
	  	if (HAL_ADC_PollForConversion(&hadc1,1000000) == HAL_OK){
 800113e:	491a      	ldr	r1, [pc, #104]	; (80011a8 <main+0xa8>)
 8001140:	4818      	ldr	r0, [pc, #96]	; (80011a4 <main+0xa4>)
 8001142:	f000 fda7 	bl	8001c94 <HAL_ADC_PollForConversion>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d103      	bne.n	8001154 <main+0x54>
	  		readValue = HAL_ADC_GetValue(&hadc1);
 800114c:	4815      	ldr	r0, [pc, #84]	; (80011a4 <main+0xa4>)
 800114e:	f000 fe2c 	bl	8001daa <HAL_ADC_GetValue>
 8001152:	6278      	str	r0, [r7, #36]	; 0x24
	  	}
	  sprintf(buffer,"<%d,%d>",readValue,Distance);
 8001154:	4b15      	ldr	r3, [pc, #84]	; (80011ac <main+0xac>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	1d38      	adds	r0, r7, #4
 800115a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800115c:	4914      	ldr	r1, [pc, #80]	; (80011b0 <main+0xb0>)
 800115e:	f003 fdcf 	bl	8004d00 <siprintf>
	  HAL_UART_Transmit(&huart1,buffer,strlen(buffer),100);
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f83b 	bl	80001e0 <strlen>
 800116a:	4603      	mov	r3, r0
 800116c:	b29a      	uxth	r2, r3
 800116e:	1d39      	adds	r1, r7, #4
 8001170:	2364      	movs	r3, #100	; 0x64
 8001172:	480a      	ldr	r0, [pc, #40]	; (800119c <main+0x9c>)
 8001174:	f002 fe17 	bl	8003da6 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2,buffer,strlen(buffer),100);
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f830 	bl	80001e0 <strlen>
 8001180:	4603      	mov	r3, r0
 8001182:	b29a      	uxth	r2, r3
 8001184:	1d39      	adds	r1, r7, #4
 8001186:	2364      	movs	r3, #100	; 0x64
 8001188:	480a      	ldr	r0, [pc, #40]	; (80011b4 <main+0xb4>)
 800118a:	f002 fe0c 	bl	8003da6 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800118e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001192:	f000 fc63 	bl	8001a5c <HAL_Delay>
  {
 8001196:	e7cd      	b.n	8001134 <main+0x34>
 8001198:	200004c8 	.word	0x200004c8
 800119c:	20000514 	.word	0x20000514
 80011a0:	20000558 	.word	0x20000558
 80011a4:	200004cc 	.word	0x200004cc
 80011a8:	000f4240 	.word	0x000f4240
 80011ac:	200004a9 	.word	0x200004a9
 80011b0:	08005574 	.word	0x08005574
 80011b4:	200005a0 	.word	0x200005a0

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b094      	sub	sp, #80	; 0x50
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0320 	add.w	r3, r7, #32
 80011c2:	2230      	movs	r2, #48	; 0x30
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f003 fd92 	bl	8004cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	4b27      	ldr	r3, [pc, #156]	; (8001280 <SystemClock_Config+0xc8>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	4a26      	ldr	r2, [pc, #152]	; (8001280 <SystemClock_Config+0xc8>)
 80011e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ea:	6413      	str	r3, [r2, #64]	; 0x40
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <SystemClock_Config+0xc8>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f8:	2300      	movs	r3, #0
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	4b21      	ldr	r3, [pc, #132]	; (8001284 <SystemClock_Config+0xcc>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a20      	ldr	r2, [pc, #128]	; (8001284 <SystemClock_Config+0xcc>)
 8001202:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <SystemClock_Config+0xcc>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001214:	2301      	movs	r3, #1
 8001216:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121e:	2302      	movs	r3, #2
 8001220:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001222:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001226:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001228:	2304      	movs	r3, #4
 800122a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800122c:	2332      	movs	r3, #50	; 0x32
 800122e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001230:	2302      	movs	r3, #2
 8001232:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001234:	2304      	movs	r3, #4
 8001236:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001238:	f107 0320 	add.w	r3, r7, #32
 800123c:	4618      	mov	r0, r3
 800123e:	f001 fb31 	bl	80028a4 <HAL_RCC_OscConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001248:	f000 f99e 	bl	8001588 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124c:	230f      	movs	r3, #15
 800124e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001250:	2302      	movs	r3, #2
 8001252:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	2101      	movs	r1, #1
 8001268:	4618      	mov	r0, r3
 800126a:	f001 fd93 	bl	8002d94 <HAL_RCC_ClockConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001274:	f000 f988 	bl	8001588 <Error_Handler>
  }
}
 8001278:	bf00      	nop
 800127a:	3750      	adds	r7, #80	; 0x50
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40023800 	.word	0x40023800
 8001284:	40007000 	.word	0x40007000

08001288 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800128e:	463b      	mov	r3, r7
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800129a:	4b21      	ldr	r3, [pc, #132]	; (8001320 <MX_ADC1_Init+0x98>)
 800129c:	4a21      	ldr	r2, [pc, #132]	; (8001324 <MX_ADC1_Init+0x9c>)
 800129e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012a0:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <MX_ADC1_Init+0x98>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012a6:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <MX_ADC1_Init+0x98>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012ac:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <MX_ADC1_Init+0x98>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012b2:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <MX_ADC1_Init+0x98>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012b8:	4b19      	ldr	r3, [pc, #100]	; (8001320 <MX_ADC1_Init+0x98>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012c0:	4b17      	ldr	r3, [pc, #92]	; (8001320 <MX_ADC1_Init+0x98>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <MX_ADC1_Init+0x98>)
 80012c8:	4a17      	ldr	r2, [pc, #92]	; (8001328 <MX_ADC1_Init+0xa0>)
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <MX_ADC1_Init+0x98>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <MX_ADC1_Init+0x98>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MX_ADC1_Init+0x98>)
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <MX_ADC1_Init+0x98>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012e6:	480e      	ldr	r0, [pc, #56]	; (8001320 <MX_ADC1_Init+0x98>)
 80012e8:	f000 fbdc 	bl	8001aa4 <HAL_ADC_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012f2:	f000 f949 	bl	8001588 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012f6:	2309      	movs	r3, #9
 80012f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012fa:	2301      	movs	r3, #1
 80012fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001302:	463b      	mov	r3, r7
 8001304:	4619      	mov	r1, r3
 8001306:	4806      	ldr	r0, [pc, #24]	; (8001320 <MX_ADC1_Init+0x98>)
 8001308:	f000 fd5c 	bl	8001dc4 <HAL_ADC_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001312:	f000 f939 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200004cc 	.word	0x200004cc
 8001324:	40012000 	.word	0x40012000
 8001328:	0f000001 	.word	0x0f000001

0800132c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001332:	f107 0310 	add.w	r3, r7, #16
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800133c:	463b      	mov	r3, r7
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001348:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <MX_TIM1_Init+0xa4>)
 800134a:	4a22      	ldr	r2, [pc, #136]	; (80013d4 <MX_TIM1_Init+0xa8>)
 800134c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <MX_TIM1_Init+0xa4>)
 8001350:	2231      	movs	r2, #49	; 0x31
 8001352:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <MX_TIM1_Init+0xa4>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <MX_TIM1_Init+0xa4>)
 800135c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001360:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_TIM1_Init+0xa4>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <MX_TIM1_Init+0xa4>)
 800136a:	2200      	movs	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_TIM1_Init+0xa4>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001374:	4816      	ldr	r0, [pc, #88]	; (80013d0 <MX_TIM1_Init+0xa4>)
 8001376:	f001 ff09 	bl	800318c <HAL_TIM_IC_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001380:	f000 f902 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4619      	mov	r1, r3
 8001392:	480f      	ldr	r0, [pc, #60]	; (80013d0 <MX_TIM1_Init+0xa4>)
 8001394:	f002 fc38 	bl	8003c08 <HAL_TIMEx_MasterConfigSynchronization>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800139e:	f000 f8f3 	bl	8001588 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013a2:	2300      	movs	r3, #0
 80013a4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013a6:	2301      	movs	r3, #1
 80013a8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013b2:	463b      	mov	r3, r7
 80013b4:	2200      	movs	r2, #0
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_TIM1_Init+0xa4>)
 80013ba:	f002 f959 	bl	8003670 <HAL_TIM_IC_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80013c4:	f000 f8e0 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000558 	.word	0x20000558
 80013d4:	40010000 	.word	0x40010000

080013d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_USART1_UART_Init+0x4c>)
 80013de:	4a12      	ldr	r2, [pc, #72]	; (8001428 <MX_USART1_UART_Init+0x50>)
 80013e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <MX_USART1_UART_Init+0x4c>)
 80013e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_USART1_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_USART1_UART_Init+0x4c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_USART1_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_USART1_UART_Init+0x4c>)
 80013fe:	220c      	movs	r2, #12
 8001400:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <MX_USART1_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <MX_USART1_UART_Init+0x4c>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_USART1_UART_Init+0x4c>)
 8001410:	f002 fc7c 	bl	8003d0c <HAL_UART_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800141a:	f000 f8b5 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000514 	.word	0x20000514
 8001428:	40011000 	.word	0x40011000

0800142c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <MX_USART2_UART_Init+0x50>)
 8001434:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 8001438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800143c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 8001464:	f002 fc52 	bl	8003d0c <HAL_UART_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800146e:	f000 f88b 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200005a0 	.word	0x200005a0
 800147c:	40004400 	.word	0x40004400

08001480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	4b38      	ldr	r3, [pc, #224]	; (800157c <MX_GPIO_Init+0xfc>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a37      	ldr	r2, [pc, #220]	; (800157c <MX_GPIO_Init+0xfc>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b35      	ldr	r3, [pc, #212]	; (800157c <MX_GPIO_Init+0xfc>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b31      	ldr	r3, [pc, #196]	; (800157c <MX_GPIO_Init+0xfc>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a30      	ldr	r2, [pc, #192]	; (800157c <MX_GPIO_Init+0xfc>)
 80014bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b2e      	ldr	r3, [pc, #184]	; (800157c <MX_GPIO_Init+0xfc>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	4b2a      	ldr	r3, [pc, #168]	; (800157c <MX_GPIO_Init+0xfc>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a29      	ldr	r2, [pc, #164]	; (800157c <MX_GPIO_Init+0xfc>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b27      	ldr	r3, [pc, #156]	; (800157c <MX_GPIO_Init+0xfc>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4b23      	ldr	r3, [pc, #140]	; (800157c <MX_GPIO_Init+0xfc>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a22      	ldr	r2, [pc, #136]	; (800157c <MX_GPIO_Init+0xfc>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b20      	ldr	r3, [pc, #128]	; (800157c <MX_GPIO_Init+0xfc>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	2120      	movs	r1, #32
 800150a:	481d      	ldr	r0, [pc, #116]	; (8001580 <MX_GPIO_Init+0x100>)
 800150c:	f001 f9b0 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001516:	481b      	ldr	r0, [pc, #108]	; (8001584 <MX_GPIO_Init+0x104>)
 8001518:	f001 f9aa 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800151c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001522:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	4814      	ldr	r0, [pc, #80]	; (8001584 <MX_GPIO_Init+0x104>)
 8001534:	f001 f818 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001538:	2320      	movs	r3, #32
 800153a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2300      	movs	r3, #0
 8001546:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4619      	mov	r1, r3
 800154e:	480c      	ldr	r0, [pc, #48]	; (8001580 <MX_GPIO_Init+0x100>)
 8001550:	f001 f80a 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_GPIO_Init+0x104>)
 800156e:	f000 fffb 	bl	8002568 <HAL_GPIO_Init>

}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	; 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800
 8001580:	40020000 	.word	0x40020000
 8001584:	40020800 	.word	0x40020800

08001588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158c:	b672      	cpsid	i
}
 800158e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001590:	e7fe      	b.n	8001590 <Error_Handler+0x8>
	...

08001594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <HAL_MspInit+0x4c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	4a0f      	ldr	r2, [pc, #60]	; (80015e0 <HAL_MspInit+0x4c>)
 80015a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a8:	6453      	str	r3, [r2, #68]	; 0x44
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <HAL_MspInit+0x4c>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_MspInit+0x4c>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	4a08      	ldr	r2, [pc, #32]	; (80015e0 <HAL_MspInit+0x4c>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_MspInit+0x4c>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015d2:	2007      	movs	r0, #7
 80015d4:	f000 fef4 	bl	80023c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40023800 	.word	0x40023800

080015e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a17      	ldr	r2, [pc, #92]	; (8001660 <HAL_ADC_MspInit+0x7c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d127      	bne.n	8001656 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <HAL_ADC_MspInit+0x80>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	4a15      	ldr	r2, [pc, #84]	; (8001664 <HAL_ADC_MspInit+0x80>)
 8001610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001614:	6453      	str	r3, [r2, #68]	; 0x44
 8001616:	4b13      	ldr	r3, [pc, #76]	; (8001664 <HAL_ADC_MspInit+0x80>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_ADC_MspInit+0x80>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <HAL_ADC_MspInit+0x80>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <HAL_ADC_MspInit+0x80>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800163e:	2302      	movs	r3, #2
 8001640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001642:	2303      	movs	r3, #3
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	4805      	ldr	r0, [pc, #20]	; (8001668 <HAL_ADC_MspInit+0x84>)
 8001652:	f000 ff89 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001656:	bf00      	nop
 8001658:	3728      	adds	r7, #40	; 0x28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40012000 	.word	0x40012000
 8001664:	40023800 	.word	0x40023800
 8001668:	40020400 	.word	0x40020400

0800166c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a1d      	ldr	r2, [pc, #116]	; (8001700 <HAL_TIM_IC_MspInit+0x94>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d134      	bne.n	80016f8 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <HAL_TIM_IC_MspInit+0x98>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	4a1b      	ldr	r2, [pc, #108]	; (8001704 <HAL_TIM_IC_MspInit+0x98>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6453      	str	r3, [r2, #68]	; 0x44
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_TIM_IC_MspInit+0x98>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_TIM_IC_MspInit+0x98>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a14      	ldr	r2, [pc, #80]	; (8001704 <HAL_TIM_IC_MspInit+0x98>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_TIM_IC_MspInit+0x98>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016d8:	2301      	movs	r3, #1
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4619      	mov	r1, r3
 80016e2:	4809      	ldr	r0, [pc, #36]	; (8001708 <HAL_TIM_IC_MspInit+0x9c>)
 80016e4:	f000 ff40 	bl	8002568 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2100      	movs	r1, #0
 80016ec:	201b      	movs	r0, #27
 80016ee:	f000 fe72 	bl	80023d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80016f2:	201b      	movs	r0, #27
 80016f4:	f000 fe8b 	bl	800240e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016f8:	bf00      	nop
 80016fa:	3728      	adds	r7, #40	; 0x28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40010000 	.word	0x40010000
 8001704:	40023800 	.word	0x40023800
 8001708:	40020000 	.word	0x40020000

0800170c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08c      	sub	sp, #48	; 0x30
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 031c 	add.w	r3, r7, #28
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a36      	ldr	r2, [pc, #216]	; (8001804 <HAL_UART_MspInit+0xf8>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d12d      	bne.n	800178a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
 8001732:	4b35      	ldr	r3, [pc, #212]	; (8001808 <HAL_UART_MspInit+0xfc>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	4a34      	ldr	r2, [pc, #208]	; (8001808 <HAL_UART_MspInit+0xfc>)
 8001738:	f043 0310 	orr.w	r3, r3, #16
 800173c:	6453      	str	r3, [r2, #68]	; 0x44
 800173e:	4b32      	ldr	r3, [pc, #200]	; (8001808 <HAL_UART_MspInit+0xfc>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	f003 0310 	and.w	r3, r3, #16
 8001746:	61bb      	str	r3, [r7, #24]
 8001748:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	4b2e      	ldr	r3, [pc, #184]	; (8001808 <HAL_UART_MspInit+0xfc>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a2d      	ldr	r2, [pc, #180]	; (8001808 <HAL_UART_MspInit+0xfc>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <HAL_UART_MspInit+0xfc>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001766:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800176a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001774:	2303      	movs	r3, #3
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001778:	2307      	movs	r3, #7
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f107 031c 	add.w	r3, r7, #28
 8001780:	4619      	mov	r1, r3
 8001782:	4822      	ldr	r0, [pc, #136]	; (800180c <HAL_UART_MspInit+0x100>)
 8001784:	f000 fef0 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001788:	e038      	b.n	80017fc <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a20      	ldr	r2, [pc, #128]	; (8001810 <HAL_UART_MspInit+0x104>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d133      	bne.n	80017fc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001794:	2300      	movs	r3, #0
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <HAL_UART_MspInit+0xfc>)
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	4a1a      	ldr	r2, [pc, #104]	; (8001808 <HAL_UART_MspInit+0xfc>)
 800179e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a2:	6413      	str	r3, [r2, #64]	; 0x40
 80017a4:	4b18      	ldr	r3, [pc, #96]	; (8001808 <HAL_UART_MspInit+0xfc>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <HAL_UART_MspInit+0xfc>)
 80017b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b8:	4a13      	ldr	r2, [pc, #76]	; (8001808 <HAL_UART_MspInit+0xfc>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6313      	str	r3, [r2, #48]	; 0x30
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_UART_MspInit+0xfc>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017cc:	230c      	movs	r3, #12
 80017ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d8:	2303      	movs	r3, #3
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017dc:	2307      	movs	r3, #7
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	4619      	mov	r1, r3
 80017e6:	4809      	ldr	r0, [pc, #36]	; (800180c <HAL_UART_MspInit+0x100>)
 80017e8:	f000 febe 	bl	8002568 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2100      	movs	r1, #0
 80017f0:	2026      	movs	r0, #38	; 0x26
 80017f2:	f000 fdf0 	bl	80023d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017f6:	2026      	movs	r0, #38	; 0x26
 80017f8:	f000 fe09 	bl	800240e <HAL_NVIC_EnableIRQ>
}
 80017fc:	bf00      	nop
 80017fe:	3730      	adds	r7, #48	; 0x30
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40011000 	.word	0x40011000
 8001808:	40023800 	.word	0x40023800
 800180c:	40020000 	.word	0x40020000
 8001810:	40004400 	.word	0x40004400

08001814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <NMI_Handler+0x4>

0800181a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <HardFault_Handler+0x4>

08001820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <MemManage_Handler+0x4>

08001826 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182a:	e7fe      	b.n	800182a <BusFault_Handler+0x4>

0800182c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <UsageFault_Handler+0x4>

08001832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001860:	f000 f8dc 	bl	8001a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}

08001868 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <TIM1_CC_IRQHandler+0x10>)
 800186e:	f001 fdf7 	bl	8003460 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000558 	.word	0x20000558

0800187c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  Uart_isr (&huart2);
 8001880:	4803      	ldr	r0, [pc, #12]	; (8001890 <USART2_IRQHandler+0x14>)
 8001882:	f7ff fa93 	bl	8000dac <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001886:	4802      	ldr	r0, [pc, #8]	; (8001890 <USART2_IRQHandler+0x14>)
 8001888:	f002 fb50 	bl	8003f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	200005a0 	.word	0x200005a0

08001894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800189c:	4a14      	ldr	r2, [pc, #80]	; (80018f0 <_sbrk+0x5c>)
 800189e:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <_sbrk+0x60>)
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a8:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <_sbrk+0x64>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d102      	bne.n	80018b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <_sbrk+0x64>)
 80018b2:	4a12      	ldr	r2, [pc, #72]	; (80018fc <_sbrk+0x68>)
 80018b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d207      	bcs.n	80018d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c4:	f003 f9ea 	bl	8004c9c <__errno>
 80018c8:	4603      	mov	r3, r0
 80018ca:	220c      	movs	r2, #12
 80018cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	e009      	b.n	80018e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <_sbrk+0x64>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018da:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <_sbrk+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <_sbrk+0x64>)
 80018e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018e6:	68fb      	ldr	r3, [r7, #12]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20020000 	.word	0x20020000
 80018f4:	00000400 	.word	0x00000400
 80018f8:	200004ac 	.word	0x200004ac
 80018fc:	200005f8 	.word	0x200005f8

08001900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <SystemInit+0x20>)
 8001906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <SystemInit+0x20>)
 800190c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800195c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001928:	480d      	ldr	r0, [pc, #52]	; (8001960 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800192a:	490e      	ldr	r1, [pc, #56]	; (8001964 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800192c:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001930:	e002      	b.n	8001938 <LoopCopyDataInit>

08001932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001936:	3304      	adds	r3, #4

08001938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800193c:	d3f9      	bcc.n	8001932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193e:	4a0b      	ldr	r2, [pc, #44]	; (800196c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001940:	4c0b      	ldr	r4, [pc, #44]	; (8001970 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001944:	e001      	b.n	800194a <LoopFillZerobss>

08001946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001948:	3204      	adds	r2, #4

0800194a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800194c:	d3fb      	bcc.n	8001946 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800194e:	f7ff ffd7 	bl	8001900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001952:	f003 f9a9 	bl	8004ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001956:	f7ff fbd3 	bl	8001100 <main>
  bx  lr    
 800195a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800195c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001964:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001968:	080055d8 	.word	0x080055d8
  ldr r2, =_sbss
 800196c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001970:	200005f8 	.word	0x200005f8

08001974 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001974:	e7fe      	b.n	8001974 <ADC_IRQHandler>
	...

08001978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800197c:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <HAL_Init+0x40>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0d      	ldr	r2, [pc, #52]	; (80019b8 <HAL_Init+0x40>)
 8001982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001986:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <HAL_Init+0x40>)
 800198e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001992:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <HAL_Init+0x40>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <HAL_Init+0x40>)
 800199a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a0:	2003      	movs	r0, #3
 80019a2:	f000 fd0d 	bl	80023c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a6:	2000      	movs	r0, #0
 80019a8:	f000 f808 	bl	80019bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ac:	f7ff fdf2 	bl	8001594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023c00 	.word	0x40023c00

080019bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_InitTick+0x54>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_InitTick+0x58>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4619      	mov	r1, r3
 80019ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 fd25 	bl	800242a <HAL_SYSTICK_Config>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00e      	b.n	8001a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b0f      	cmp	r3, #15
 80019ee:	d80a      	bhi.n	8001a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f0:	2200      	movs	r2, #0
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	f000 fced 	bl	80023d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019fc:	4a06      	ldr	r2, [pc, #24]	; (8001a18 <HAL_InitTick+0x5c>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e000      	b.n	8001a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000008 	.word	0x20000008
 8001a18:	20000004 	.word	0x20000004

08001a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_IncTick+0x20>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_IncTick+0x24>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <HAL_IncTick+0x24>)
 8001a2e:	6013      	str	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000008 	.word	0x20000008
 8001a40:	200005e4 	.word	0x200005e4

08001a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return uwTick;
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <HAL_GetTick+0x14>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	200005e4 	.word	0x200005e4

08001a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a64:	f7ff ffee 	bl	8001a44 <HAL_GetTick>
 8001a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a74:	d005      	beq.n	8001a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <HAL_Delay+0x44>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4413      	add	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a82:	bf00      	nop
 8001a84:	f7ff ffde 	bl	8001a44 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d8f7      	bhi.n	8001a84 <HAL_Delay+0x28>
  {
  }
}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000008 	.word	0x20000008

08001aa4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aac:	2300      	movs	r3, #0
 8001aae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e033      	b.n	8001b22 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d109      	bne.n	8001ad6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff fd8e 	bl	80015e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 0310 	and.w	r3, r3, #16
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d118      	bne.n	8001b14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aea:	f023 0302 	bic.w	r3, r3, #2
 8001aee:	f043 0202 	orr.w	r2, r3, #2
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 fa96 	bl	8002028 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f023 0303 	bic.w	r3, r3, #3
 8001b0a:	f043 0201 	orr.w	r2, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	641a      	str	r2, [r3, #64]	; 0x40
 8001b12:	e001      	b.n	8001b18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d101      	bne.n	8001b46 <HAL_ADC_Start+0x1a>
 8001b42:	2302      	movs	r3, #2
 8001b44:	e097      	b.n	8001c76 <HAL_ADC_Start+0x14a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d018      	beq.n	8001b8e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0201 	orr.w	r2, r2, #1
 8001b6a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b6c:	4b45      	ldr	r3, [pc, #276]	; (8001c84 <HAL_ADC_Start+0x158>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a45      	ldr	r2, [pc, #276]	; (8001c88 <HAL_ADC_Start+0x15c>)
 8001b72:	fba2 2303 	umull	r2, r3, r2, r3
 8001b76:	0c9a      	lsrs	r2, r3, #18
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b80:	e002      	b.n	8001b88 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	3b01      	subs	r3, #1
 8001b86:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f9      	bne.n	8001b82 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d15f      	bne.n	8001c5c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d007      	beq.n	8001bce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bc6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bda:	d106      	bne.n	8001bea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be0:	f023 0206 	bic.w	r2, r3, #6
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	645a      	str	r2, [r3, #68]	; 0x44
 8001be8:	e002      	b.n	8001bf0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bf8:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <HAL_ADC_Start+0x160>)
 8001bfa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c04:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10f      	bne.n	8001c32 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d129      	bne.n	8001c74 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	e020      	b.n	8001c74 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a16      	ldr	r2, [pc, #88]	; (8001c90 <HAL_ADC_Start+0x164>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d11b      	bne.n	8001c74 <HAL_ADC_Start+0x148>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d114      	bne.n	8001c74 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	e00b      	b.n	8001c74 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	f043 0210 	orr.w	r2, r3, #16
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6c:	f043 0201 	orr.w	r2, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000000 	.word	0x20000000
 8001c88:	431bde83 	.word	0x431bde83
 8001c8c:	40012300 	.word	0x40012300
 8001c90:	40012000 	.word	0x40012000

08001c94 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cb0:	d113      	bne.n	8001cda <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cc0:	d10b      	bne.n	8001cda <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f043 0220 	orr.w	r2, r3, #32
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e063      	b.n	8001da2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001cda:	f7ff feb3 	bl	8001a44 <HAL_GetTick>
 8001cde:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ce0:	e021      	b.n	8001d26 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce8:	d01d      	beq.n	8001d26 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d007      	beq.n	8001d00 <HAL_ADC_PollForConversion+0x6c>
 8001cf0:	f7ff fea8 	bl	8001a44 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d212      	bcs.n	8001d26 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d00b      	beq.n	8001d26 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f043 0204 	orr.w	r2, r3, #4
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e03d      	b.n	8001da2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d1d6      	bne.n	8001ce2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f06f 0212 	mvn.w	r2, #18
 8001d3c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d123      	bne.n	8001da0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d11f      	bne.n	8001da0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d66:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d006      	beq.n	8001d7c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d111      	bne.n	8001da0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d105      	bne.n	8001da0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	f043 0201 	orr.w	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x1c>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e113      	b.n	8002008 <HAL_ADC_ConfigChannel+0x244>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b09      	cmp	r3, #9
 8001dee:	d925      	bls.n	8001e3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68d9      	ldr	r1, [r3, #12]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	3b1e      	subs	r3, #30
 8001e06:	2207      	movs	r2, #7
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43da      	mvns	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	400a      	ands	r2, r1
 8001e14:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68d9      	ldr	r1, [r3, #12]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	4618      	mov	r0, r3
 8001e28:	4603      	mov	r3, r0
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4403      	add	r3, r0
 8001e2e:	3b1e      	subs	r3, #30
 8001e30:	409a      	lsls	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	e022      	b.n	8001e82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6919      	ldr	r1, [r3, #16]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	2207      	movs	r2, #7
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43da      	mvns	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	400a      	ands	r2, r1
 8001e5e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6919      	ldr	r1, [r3, #16]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	4618      	mov	r0, r3
 8001e72:	4603      	mov	r3, r0
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	4403      	add	r3, r0
 8001e78:	409a      	lsls	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d824      	bhi.n	8001ed4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	3b05      	subs	r3, #5
 8001e9c:	221f      	movs	r2, #31
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43da      	mvns	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	400a      	ands	r2, r1
 8001eaa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	4618      	mov	r0, r3
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3b05      	subs	r3, #5
 8001ec6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ed2:	e04c      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b0c      	cmp	r3, #12
 8001eda:	d824      	bhi.n	8001f26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	3b23      	subs	r3, #35	; 0x23
 8001eee:	221f      	movs	r2, #31
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43da      	mvns	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	400a      	ands	r2, r1
 8001efc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	3b23      	subs	r3, #35	; 0x23
 8001f18:	fa00 f203 	lsl.w	r2, r0, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	631a      	str	r2, [r3, #48]	; 0x30
 8001f24:	e023      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	3b41      	subs	r3, #65	; 0x41
 8001f38:	221f      	movs	r2, #31
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	400a      	ands	r2, r1
 8001f46:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	4618      	mov	r0, r3
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	3b41      	subs	r3, #65	; 0x41
 8001f62:	fa00 f203 	lsl.w	r2, r0, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f6e:	4b29      	ldr	r3, [pc, #164]	; (8002014 <HAL_ADC_ConfigChannel+0x250>)
 8001f70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a28      	ldr	r2, [pc, #160]	; (8002018 <HAL_ADC_ConfigChannel+0x254>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d10f      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x1d8>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b12      	cmp	r3, #18
 8001f82:	d10b      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1d      	ldr	r2, [pc, #116]	; (8002018 <HAL_ADC_ConfigChannel+0x254>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d12b      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x23a>
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a1c      	ldr	r2, [pc, #112]	; (800201c <HAL_ADC_ConfigChannel+0x258>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d003      	beq.n	8001fb8 <HAL_ADC_ConfigChannel+0x1f4>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b11      	cmp	r3, #17
 8001fb6:	d122      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a11      	ldr	r2, [pc, #68]	; (800201c <HAL_ADC_ConfigChannel+0x258>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d111      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <HAL_ADC_ConfigChannel+0x25c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a11      	ldr	r2, [pc, #68]	; (8002024 <HAL_ADC_ConfigChannel+0x260>)
 8001fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe4:	0c9a      	lsrs	r2, r3, #18
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ff0:	e002      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f9      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	40012300 	.word	0x40012300
 8002018:	40012000 	.word	0x40012000
 800201c:	10000012 	.word	0x10000012
 8002020:	20000000 	.word	0x20000000
 8002024:	431bde83 	.word	0x431bde83

08002028 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002030:	4b79      	ldr	r3, [pc, #484]	; (8002218 <ADC_Init+0x1f0>)
 8002032:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	431a      	orrs	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800205c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6859      	ldr	r1, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	021a      	lsls	r2, r3, #8
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002080:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6859      	ldr	r1, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6899      	ldr	r1, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ba:	4a58      	ldr	r2, [pc, #352]	; (800221c <ADC_Init+0x1f4>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d022      	beq.n	8002106 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6899      	ldr	r1, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6899      	ldr	r1, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	e00f      	b.n	8002126 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002114:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002124:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0202 	bic.w	r2, r2, #2
 8002134:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6899      	ldr	r1, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	7e1b      	ldrb	r3, [r3, #24]
 8002140:	005a      	lsls	r2, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d01b      	beq.n	800218c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002162:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002172:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6859      	ldr	r1, [r3, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	3b01      	subs	r3, #1
 8002180:	035a      	lsls	r2, r3, #13
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	e007      	b.n	800219c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800219a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	051a      	lsls	r2, r3, #20
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6899      	ldr	r1, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021de:	025a      	lsls	r2, r3, #9
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6899      	ldr	r1, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	029a      	lsls	r2, r3, #10
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	609a      	str	r2, [r3, #8]
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	40012300 	.word	0x40012300
 800221c:	0f000001 	.word	0x0f000001

08002220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <__NVIC_SetPriorityGrouping+0x44>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800223c:	4013      	ands	r3, r2
 800223e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800224c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002252:	4a04      	ldr	r2, [pc, #16]	; (8002264 <__NVIC_SetPriorityGrouping+0x44>)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	60d3      	str	r3, [r2, #12]
}
 8002258:	bf00      	nop
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <__NVIC_GetPriorityGrouping+0x18>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	f003 0307 	and.w	r3, r3, #7
}
 8002276:	4618      	mov	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	2b00      	cmp	r3, #0
 8002294:	db0b      	blt.n	80022ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	f003 021f 	and.w	r2, r3, #31
 800229c:	4907      	ldr	r1, [pc, #28]	; (80022bc <__NVIC_EnableIRQ+0x38>)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	2001      	movs	r0, #1
 80022a6:	fa00 f202 	lsl.w	r2, r0, r2
 80022aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	e000e100 	.word	0xe000e100

080022c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	6039      	str	r1, [r7, #0]
 80022ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	db0a      	blt.n	80022ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	490c      	ldr	r1, [pc, #48]	; (800230c <__NVIC_SetPriority+0x4c>)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	0112      	lsls	r2, r2, #4
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	440b      	add	r3, r1
 80022e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e8:	e00a      	b.n	8002300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4908      	ldr	r1, [pc, #32]	; (8002310 <__NVIC_SetPriority+0x50>)
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	3b04      	subs	r3, #4
 80022f8:	0112      	lsls	r2, r2, #4
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	440b      	add	r3, r1
 80022fe:	761a      	strb	r2, [r3, #24]
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000e100 	.word	0xe000e100
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002314:	b480      	push	{r7}
 8002316:	b089      	sub	sp, #36	; 0x24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f1c3 0307 	rsb	r3, r3, #7
 800232e:	2b04      	cmp	r3, #4
 8002330:	bf28      	it	cs
 8002332:	2304      	movcs	r3, #4
 8002334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3304      	adds	r3, #4
 800233a:	2b06      	cmp	r3, #6
 800233c:	d902      	bls.n	8002344 <NVIC_EncodePriority+0x30>
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3b03      	subs	r3, #3
 8002342:	e000      	b.n	8002346 <NVIC_EncodePriority+0x32>
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	f04f 32ff 	mov.w	r2, #4294967295
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43da      	mvns	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	401a      	ands	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800235c:	f04f 31ff 	mov.w	r1, #4294967295
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	fa01 f303 	lsl.w	r3, r1, r3
 8002366:	43d9      	mvns	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	4313      	orrs	r3, r2
         );
}
 800236e:	4618      	mov	r0, r3
 8002370:	3724      	adds	r7, #36	; 0x24
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3b01      	subs	r3, #1
 8002388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800238c:	d301      	bcc.n	8002392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800238e:	2301      	movs	r3, #1
 8002390:	e00f      	b.n	80023b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002392:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <SysTick_Config+0x40>)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800239a:	210f      	movs	r1, #15
 800239c:	f04f 30ff 	mov.w	r0, #4294967295
 80023a0:	f7ff ff8e 	bl	80022c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <SysTick_Config+0x40>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023aa:	4b04      	ldr	r3, [pc, #16]	; (80023bc <SysTick_Config+0x40>)
 80023ac:	2207      	movs	r2, #7
 80023ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	e000e010 	.word	0xe000e010

080023c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ff29 	bl	8002220 <__NVIC_SetPriorityGrouping>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b086      	sub	sp, #24
 80023da:	af00      	add	r7, sp, #0
 80023dc:	4603      	mov	r3, r0
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e8:	f7ff ff3e 	bl	8002268 <__NVIC_GetPriorityGrouping>
 80023ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	68b9      	ldr	r1, [r7, #8]
 80023f2:	6978      	ldr	r0, [r7, #20]
 80023f4:	f7ff ff8e 	bl	8002314 <NVIC_EncodePriority>
 80023f8:	4602      	mov	r2, r0
 80023fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fe:	4611      	mov	r1, r2
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff ff5d 	bl	80022c0 <__NVIC_SetPriority>
}
 8002406:	bf00      	nop
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	4603      	mov	r3, r0
 8002416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff31 	bl	8002284 <__NVIC_EnableIRQ>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff ffa2 	bl	800237c <SysTick_Config>
 8002438:	4603      	mov	r3, r0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b084      	sub	sp, #16
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002450:	f7ff faf8 	bl	8001a44 <HAL_GetTick>
 8002454:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d008      	beq.n	8002474 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2280      	movs	r2, #128	; 0x80
 8002466:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e052      	b.n	800251a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0216 	bic.w	r2, r2, #22
 8002482:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002492:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	2b00      	cmp	r3, #0
 800249a:	d103      	bne.n	80024a4 <HAL_DMA_Abort+0x62>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d007      	beq.n	80024b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0208 	bic.w	r2, r2, #8
 80024b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0201 	bic.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024c4:	e013      	b.n	80024ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024c6:	f7ff fabd 	bl	8001a44 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b05      	cmp	r3, #5
 80024d2:	d90c      	bls.n	80024ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2220      	movs	r2, #32
 80024d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2203      	movs	r2, #3
 80024de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e015      	b.n	800251a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1e4      	bne.n	80024c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	223f      	movs	r2, #63	; 0x3f
 8002502:	409a      	lsls	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d004      	beq.n	8002540 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2280      	movs	r2, #128	; 0x80
 800253a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e00c      	b.n	800255a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2205      	movs	r2, #5
 8002544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0201 	bic.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002568:	b480      	push	{r7}
 800256a:	b089      	sub	sp, #36	; 0x24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800257a:	2300      	movs	r3, #0
 800257c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	e159      	b.n	8002838 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002584:	2201      	movs	r2, #1
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	429a      	cmp	r2, r3
 800259e:	f040 8148 	bne.w	8002832 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d005      	beq.n	80025ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d130      	bne.n	800261c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	2203      	movs	r2, #3
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025f0:	2201      	movs	r2, #1
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	f003 0201 	and.w	r2, r3, #1
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	2b03      	cmp	r3, #3
 8002626:	d017      	beq.n	8002658 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	2203      	movs	r2, #3
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d123      	bne.n	80026ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	08da      	lsrs	r2, r3, #3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3208      	adds	r2, #8
 800266c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002670:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	220f      	movs	r2, #15
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	08da      	lsrs	r2, r3, #3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3208      	adds	r2, #8
 80026a6:	69b9      	ldr	r1, [r7, #24]
 80026a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	2203      	movs	r2, #3
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0203 	and.w	r2, r3, #3
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80a2 	beq.w	8002832 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	4b57      	ldr	r3, [pc, #348]	; (8002850 <HAL_GPIO_Init+0x2e8>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	4a56      	ldr	r2, [pc, #344]	; (8002850 <HAL_GPIO_Init+0x2e8>)
 80026f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026fc:	6453      	str	r3, [r2, #68]	; 0x44
 80026fe:	4b54      	ldr	r3, [pc, #336]	; (8002850 <HAL_GPIO_Init+0x2e8>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800270a:	4a52      	ldr	r2, [pc, #328]	; (8002854 <HAL_GPIO_Init+0x2ec>)
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	089b      	lsrs	r3, r3, #2
 8002710:	3302      	adds	r3, #2
 8002712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	220f      	movs	r2, #15
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4013      	ands	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a49      	ldr	r2, [pc, #292]	; (8002858 <HAL_GPIO_Init+0x2f0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d019      	beq.n	800276a <HAL_GPIO_Init+0x202>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a48      	ldr	r2, [pc, #288]	; (800285c <HAL_GPIO_Init+0x2f4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d013      	beq.n	8002766 <HAL_GPIO_Init+0x1fe>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a47      	ldr	r2, [pc, #284]	; (8002860 <HAL_GPIO_Init+0x2f8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d00d      	beq.n	8002762 <HAL_GPIO_Init+0x1fa>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a46      	ldr	r2, [pc, #280]	; (8002864 <HAL_GPIO_Init+0x2fc>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d007      	beq.n	800275e <HAL_GPIO_Init+0x1f6>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a45      	ldr	r2, [pc, #276]	; (8002868 <HAL_GPIO_Init+0x300>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d101      	bne.n	800275a <HAL_GPIO_Init+0x1f2>
 8002756:	2304      	movs	r3, #4
 8002758:	e008      	b.n	800276c <HAL_GPIO_Init+0x204>
 800275a:	2307      	movs	r3, #7
 800275c:	e006      	b.n	800276c <HAL_GPIO_Init+0x204>
 800275e:	2303      	movs	r3, #3
 8002760:	e004      	b.n	800276c <HAL_GPIO_Init+0x204>
 8002762:	2302      	movs	r3, #2
 8002764:	e002      	b.n	800276c <HAL_GPIO_Init+0x204>
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <HAL_GPIO_Init+0x204>
 800276a:	2300      	movs	r3, #0
 800276c:	69fa      	ldr	r2, [r7, #28]
 800276e:	f002 0203 	and.w	r2, r2, #3
 8002772:	0092      	lsls	r2, r2, #2
 8002774:	4093      	lsls	r3, r2
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800277c:	4935      	ldr	r1, [pc, #212]	; (8002854 <HAL_GPIO_Init+0x2ec>)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	089b      	lsrs	r3, r3, #2
 8002782:	3302      	adds	r3, #2
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800278a:	4b38      	ldr	r3, [pc, #224]	; (800286c <HAL_GPIO_Init+0x304>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	43db      	mvns	r3, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4013      	ands	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027ae:	4a2f      	ldr	r2, [pc, #188]	; (800286c <HAL_GPIO_Init+0x304>)
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027b4:	4b2d      	ldr	r3, [pc, #180]	; (800286c <HAL_GPIO_Init+0x304>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027d8:	4a24      	ldr	r2, [pc, #144]	; (800286c <HAL_GPIO_Init+0x304>)
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027de:	4b23      	ldr	r3, [pc, #140]	; (800286c <HAL_GPIO_Init+0x304>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002802:	4a1a      	ldr	r2, [pc, #104]	; (800286c <HAL_GPIO_Init+0x304>)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002808:	4b18      	ldr	r3, [pc, #96]	; (800286c <HAL_GPIO_Init+0x304>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800282c:	4a0f      	ldr	r2, [pc, #60]	; (800286c <HAL_GPIO_Init+0x304>)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3301      	adds	r3, #1
 8002836:	61fb      	str	r3, [r7, #28]
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	2b0f      	cmp	r3, #15
 800283c:	f67f aea2 	bls.w	8002584 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002840:	bf00      	nop
 8002842:	bf00      	nop
 8002844:	3724      	adds	r7, #36	; 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800
 8002854:	40013800 	.word	0x40013800
 8002858:	40020000 	.word	0x40020000
 800285c:	40020400 	.word	0x40020400
 8002860:	40020800 	.word	0x40020800
 8002864:	40020c00 	.word	0x40020c00
 8002868:	40021000 	.word	0x40021000
 800286c:	40013c00 	.word	0x40013c00

08002870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	807b      	strh	r3, [r7, #2]
 800287c:	4613      	mov	r3, r2
 800287e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002880:	787b      	ldrb	r3, [r7, #1]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002886:	887a      	ldrh	r2, [r7, #2]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800288c:	e003      	b.n	8002896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800288e:	887b      	ldrh	r3, [r7, #2]
 8002890:	041a      	lsls	r2, r3, #16
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	619a      	str	r2, [r3, #24]
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e264      	b.n	8002d80 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d075      	beq.n	80029ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028c2:	4ba3      	ldr	r3, [pc, #652]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d00c      	beq.n	80028e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ce:	4ba0      	ldr	r3, [pc, #640]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d112      	bne.n	8002900 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028da:	4b9d      	ldr	r3, [pc, #628]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028e6:	d10b      	bne.n	8002900 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e8:	4b99      	ldr	r3, [pc, #612]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d05b      	beq.n	80029ac <HAL_RCC_OscConfig+0x108>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d157      	bne.n	80029ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e23f      	b.n	8002d80 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002908:	d106      	bne.n	8002918 <HAL_RCC_OscConfig+0x74>
 800290a:	4b91      	ldr	r3, [pc, #580]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a90      	ldr	r2, [pc, #576]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	e01d      	b.n	8002954 <HAL_RCC_OscConfig+0xb0>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002920:	d10c      	bne.n	800293c <HAL_RCC_OscConfig+0x98>
 8002922:	4b8b      	ldr	r3, [pc, #556]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a8a      	ldr	r2, [pc, #552]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	4b88      	ldr	r3, [pc, #544]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a87      	ldr	r2, [pc, #540]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	e00b      	b.n	8002954 <HAL_RCC_OscConfig+0xb0>
 800293c:	4b84      	ldr	r3, [pc, #528]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a83      	ldr	r2, [pc, #524]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	4b81      	ldr	r3, [pc, #516]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a80      	ldr	r2, [pc, #512]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 800294e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d013      	beq.n	8002984 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7ff f872 	bl	8001a44 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002964:	f7ff f86e 	bl	8001a44 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b64      	cmp	r3, #100	; 0x64
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e204      	b.n	8002d80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002976:	4b76      	ldr	r3, [pc, #472]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0xc0>
 8002982:	e014      	b.n	80029ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002984:	f7ff f85e 	bl	8001a44 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800298c:	f7ff f85a 	bl	8001a44 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b64      	cmp	r3, #100	; 0x64
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e1f0      	b.n	8002d80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299e:	4b6c      	ldr	r3, [pc, #432]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0xe8>
 80029aa:	e000      	b.n	80029ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d063      	beq.n	8002a82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ba:	4b65      	ldr	r3, [pc, #404]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00b      	beq.n	80029de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029c6:	4b62      	ldr	r3, [pc, #392]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d11c      	bne.n	8002a0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029d2:	4b5f      	ldr	r3, [pc, #380]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d116      	bne.n	8002a0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029de:	4b5c      	ldr	r3, [pc, #368]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d005      	beq.n	80029f6 <HAL_RCC_OscConfig+0x152>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d001      	beq.n	80029f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e1c4      	b.n	8002d80 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f6:	4b56      	ldr	r3, [pc, #344]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4952      	ldr	r1, [pc, #328]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0a:	e03a      	b.n	8002a82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d020      	beq.n	8002a56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a14:	4b4f      	ldr	r3, [pc, #316]	; (8002b54 <HAL_RCC_OscConfig+0x2b0>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1a:	f7ff f813 	bl	8001a44 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a22:	f7ff f80f 	bl	8001a44 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e1a5      	b.n	8002d80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a34:	4b46      	ldr	r3, [pc, #280]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a40:	4b43      	ldr	r3, [pc, #268]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4940      	ldr	r1, [pc, #256]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	600b      	str	r3, [r1, #0]
 8002a54:	e015      	b.n	8002a82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a56:	4b3f      	ldr	r3, [pc, #252]	; (8002b54 <HAL_RCC_OscConfig+0x2b0>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7fe fff2 	bl	8001a44 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a64:	f7fe ffee 	bl	8001a44 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e184      	b.n	8002d80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a76:	4b36      	ldr	r3, [pc, #216]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d030      	beq.n	8002af0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d016      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a96:	4b30      	ldr	r3, [pc, #192]	; (8002b58 <HAL_RCC_OscConfig+0x2b4>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9c:	f7fe ffd2 	bl	8001a44 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa4:	f7fe ffce 	bl	8001a44 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e164      	b.n	8002d80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab6:	4b26      	ldr	r3, [pc, #152]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x200>
 8002ac2:	e015      	b.n	8002af0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac4:	4b24      	ldr	r3, [pc, #144]	; (8002b58 <HAL_RCC_OscConfig+0x2b4>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aca:	f7fe ffbb 	bl	8001a44 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad2:	f7fe ffb7 	bl	8001a44 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e14d      	b.n	8002d80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae4:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f0      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 80a0 	beq.w	8002c3e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b02:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10f      	bne.n	8002b2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <HAL_RCC_OscConfig+0x2b8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d121      	bne.n	8002b7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b3a:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <HAL_RCC_OscConfig+0x2b8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a07      	ldr	r2, [pc, #28]	; (8002b5c <HAL_RCC_OscConfig+0x2b8>)
 8002b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b46:	f7fe ff7d 	bl	8001a44 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4c:	e011      	b.n	8002b72 <HAL_RCC_OscConfig+0x2ce>
 8002b4e:	bf00      	nop
 8002b50:	40023800 	.word	0x40023800
 8002b54:	42470000 	.word	0x42470000
 8002b58:	42470e80 	.word	0x42470e80
 8002b5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b60:	f7fe ff70 	bl	8001a44 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e106      	b.n	8002d80 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b72:	4b85      	ldr	r3, [pc, #532]	; (8002d88 <HAL_RCC_OscConfig+0x4e4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d106      	bne.n	8002b94 <HAL_RCC_OscConfig+0x2f0>
 8002b86:	4b81      	ldr	r3, [pc, #516]	; (8002d8c <HAL_RCC_OscConfig+0x4e8>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	4a80      	ldr	r2, [pc, #512]	; (8002d8c <HAL_RCC_OscConfig+0x4e8>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	6713      	str	r3, [r2, #112]	; 0x70
 8002b92:	e01c      	b.n	8002bce <HAL_RCC_OscConfig+0x32a>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b05      	cmp	r3, #5
 8002b9a:	d10c      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x312>
 8002b9c:	4b7b      	ldr	r3, [pc, #492]	; (8002d8c <HAL_RCC_OscConfig+0x4e8>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	4a7a      	ldr	r2, [pc, #488]	; (8002d8c <HAL_RCC_OscConfig+0x4e8>)
 8002ba2:	f043 0304 	orr.w	r3, r3, #4
 8002ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba8:	4b78      	ldr	r3, [pc, #480]	; (8002d8c <HAL_RCC_OscConfig+0x4e8>)
 8002baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bac:	4a77      	ldr	r2, [pc, #476]	; (8002d8c <HAL_RCC_OscConfig+0x4e8>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb4:	e00b      	b.n	8002bce <HAL_RCC_OscConfig+0x32a>
 8002bb6:	4b75      	ldr	r3, [pc, #468]	; (8002d8c <HAL_RCC_OscConfig+0x4e8>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bba:	4a74      	ldr	r2, [pc, #464]	; (8002d8c <HAL_RCC_OscConfig+0x4e8>)
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc2:	4b72      	ldr	r3, [pc, #456]	; (8002d8c <HAL_RCC_OscConfig+0x4e8>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	4a71      	ldr	r2, [pc, #452]	; (8002d8c <HAL_RCC_OscConfig+0x4e8>)
 8002bc8:	f023 0304 	bic.w	r3, r3, #4
 8002bcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d015      	beq.n	8002c02 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd6:	f7fe ff35 	bl	8001a44 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bdc:	e00a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bde:	f7fe ff31 	bl	8001a44 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e0c5      	b.n	8002d80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf4:	4b65      	ldr	r3, [pc, #404]	; (8002d8c <HAL_RCC_OscConfig+0x4e8>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0ee      	beq.n	8002bde <HAL_RCC_OscConfig+0x33a>
 8002c00:	e014      	b.n	8002c2c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c02:	f7fe ff1f 	bl	8001a44 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c08:	e00a      	b.n	8002c20 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c0a:	f7fe ff1b 	bl	8001a44 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e0af      	b.n	8002d80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c20:	4b5a      	ldr	r3, [pc, #360]	; (8002d8c <HAL_RCC_OscConfig+0x4e8>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1ee      	bne.n	8002c0a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c2c:	7dfb      	ldrb	r3, [r7, #23]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d105      	bne.n	8002c3e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c32:	4b56      	ldr	r3, [pc, #344]	; (8002d8c <HAL_RCC_OscConfig+0x4e8>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	4a55      	ldr	r2, [pc, #340]	; (8002d8c <HAL_RCC_OscConfig+0x4e8>)
 8002c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 809b 	beq.w	8002d7e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c48:	4b50      	ldr	r3, [pc, #320]	; (8002d8c <HAL_RCC_OscConfig+0x4e8>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d05c      	beq.n	8002d0e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d141      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5c:	4b4c      	ldr	r3, [pc, #304]	; (8002d90 <HAL_RCC_OscConfig+0x4ec>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c62:	f7fe feef 	bl	8001a44 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c6a:	f7fe feeb 	bl	8001a44 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e081      	b.n	8002d80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7c:	4b43      	ldr	r3, [pc, #268]	; (8002d8c <HAL_RCC_OscConfig+0x4e8>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f0      	bne.n	8002c6a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	019b      	lsls	r3, r3, #6
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	085b      	lsrs	r3, r3, #1
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	041b      	lsls	r3, r3, #16
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002caa:	061b      	lsls	r3, r3, #24
 8002cac:	4937      	ldr	r1, [pc, #220]	; (8002d8c <HAL_RCC_OscConfig+0x4e8>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb2:	4b37      	ldr	r3, [pc, #220]	; (8002d90 <HAL_RCC_OscConfig+0x4ec>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7fe fec4 	bl	8001a44 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7fe fec0 	bl	8001a44 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e056      	b.n	8002d80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd2:	4b2e      	ldr	r3, [pc, #184]	; (8002d8c <HAL_RCC_OscConfig+0x4e8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x41c>
 8002cde:	e04e      	b.n	8002d7e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce0:	4b2b      	ldr	r3, [pc, #172]	; (8002d90 <HAL_RCC_OscConfig+0x4ec>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce6:	f7fe fead 	bl	8001a44 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cee:	f7fe fea9 	bl	8001a44 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e03f      	b.n	8002d80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d00:	4b22      	ldr	r3, [pc, #136]	; (8002d8c <HAL_RCC_OscConfig+0x4e8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f0      	bne.n	8002cee <HAL_RCC_OscConfig+0x44a>
 8002d0c:	e037      	b.n	8002d7e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e032      	b.n	8002d80 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d1a:	4b1c      	ldr	r3, [pc, #112]	; (8002d8c <HAL_RCC_OscConfig+0x4e8>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d028      	beq.n	8002d7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d121      	bne.n	8002d7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d11a      	bne.n	8002d7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d50:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d111      	bne.n	8002d7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	085b      	lsrs	r3, r3, #1
 8002d62:	3b01      	subs	r3, #1
 8002d64:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d107      	bne.n	8002d7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d001      	beq.n	8002d7e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40007000 	.word	0x40007000
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	42470060 	.word	0x42470060

08002d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0cc      	b.n	8002f42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002da8:	4b68      	ldr	r3, [pc, #416]	; (8002f4c <HAL_RCC_ClockConfig+0x1b8>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d90c      	bls.n	8002dd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b65      	ldr	r3, [pc, #404]	; (8002f4c <HAL_RCC_ClockConfig+0x1b8>)
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dbe:	4b63      	ldr	r3, [pc, #396]	; (8002f4c <HAL_RCC_ClockConfig+0x1b8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e0b8      	b.n	8002f42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d020      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002de8:	4b59      	ldr	r3, [pc, #356]	; (8002f50 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	4a58      	ldr	r2, [pc, #352]	; (8002f50 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002df2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e00:	4b53      	ldr	r3, [pc, #332]	; (8002f50 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	4a52      	ldr	r2, [pc, #328]	; (8002f50 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e0c:	4b50      	ldr	r3, [pc, #320]	; (8002f50 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	494d      	ldr	r1, [pc, #308]	; (8002f50 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d044      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d107      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e32:	4b47      	ldr	r3, [pc, #284]	; (8002f50 <HAL_RCC_ClockConfig+0x1bc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d119      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e07f      	b.n	8002f42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d003      	beq.n	8002e52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	d107      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e52:	4b3f      	ldr	r3, [pc, #252]	; (8002f50 <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d109      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e06f      	b.n	8002f42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e62:	4b3b      	ldr	r3, [pc, #236]	; (8002f50 <HAL_RCC_ClockConfig+0x1bc>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e067      	b.n	8002f42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e72:	4b37      	ldr	r3, [pc, #220]	; (8002f50 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f023 0203 	bic.w	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	4934      	ldr	r1, [pc, #208]	; (8002f50 <HAL_RCC_ClockConfig+0x1bc>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e84:	f7fe fdde 	bl	8001a44 <HAL_GetTick>
 8002e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8a:	e00a      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e8c:	f7fe fdda 	bl	8001a44 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e04f      	b.n	8002f42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea2:	4b2b      	ldr	r3, [pc, #172]	; (8002f50 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 020c 	and.w	r2, r3, #12
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d1eb      	bne.n	8002e8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb4:	4b25      	ldr	r3, [pc, #148]	; (8002f4c <HAL_RCC_ClockConfig+0x1b8>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d20c      	bcs.n	8002edc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec2:	4b22      	ldr	r3, [pc, #136]	; (8002f4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eca:	4b20      	ldr	r3, [pc, #128]	; (8002f4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e032      	b.n	8002f42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ee8:	4b19      	ldr	r3, [pc, #100]	; (8002f50 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	4916      	ldr	r1, [pc, #88]	; (8002f50 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d009      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f06:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	490e      	ldr	r1, [pc, #56]	; (8002f50 <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f1a:	f000 f821 	bl	8002f60 <HAL_RCC_GetSysClockFreq>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	091b      	lsrs	r3, r3, #4
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	490a      	ldr	r1, [pc, #40]	; (8002f54 <HAL_RCC_ClockConfig+0x1c0>)
 8002f2c:	5ccb      	ldrb	r3, [r1, r3]
 8002f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f32:	4a09      	ldr	r2, [pc, #36]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f36:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe fd3e 	bl	80019bc <HAL_InitTick>

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40023c00 	.word	0x40023c00
 8002f50:	40023800 	.word	0x40023800
 8002f54:	0800557c 	.word	0x0800557c
 8002f58:	20000000 	.word	0x20000000
 8002f5c:	20000004 	.word	0x20000004

08002f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f64:	b084      	sub	sp, #16
 8002f66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	607b      	str	r3, [r7, #4]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	2300      	movs	r3, #0
 8002f72:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f78:	4b67      	ldr	r3, [pc, #412]	; (8003118 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 030c 	and.w	r3, r3, #12
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d00d      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x40>
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	f200 80bd 	bhi.w	8003104 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x34>
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d003      	beq.n	8002f9a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f92:	e0b7      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f94:	4b61      	ldr	r3, [pc, #388]	; (800311c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f96:	60bb      	str	r3, [r7, #8]
       break;
 8002f98:	e0b7      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f9a:	4b61      	ldr	r3, [pc, #388]	; (8003120 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002f9c:	60bb      	str	r3, [r7, #8]
      break;
 8002f9e:	e0b4      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fa0:	4b5d      	ldr	r3, [pc, #372]	; (8003118 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fa8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002faa:	4b5b      	ldr	r3, [pc, #364]	; (8003118 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d04d      	beq.n	8003052 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fb6:	4b58      	ldr	r3, [pc, #352]	; (8003118 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	099b      	lsrs	r3, r3, #6
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fc6:	f04f 0100 	mov.w	r1, #0
 8002fca:	ea02 0800 	and.w	r8, r2, r0
 8002fce:	ea03 0901 	and.w	r9, r3, r1
 8002fd2:	4640      	mov	r0, r8
 8002fd4:	4649      	mov	r1, r9
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	014b      	lsls	r3, r1, #5
 8002fe0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fe4:	0142      	lsls	r2, r0, #5
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	4619      	mov	r1, r3
 8002fea:	ebb0 0008 	subs.w	r0, r0, r8
 8002fee:	eb61 0109 	sbc.w	r1, r1, r9
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	018b      	lsls	r3, r1, #6
 8002ffc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003000:	0182      	lsls	r2, r0, #6
 8003002:	1a12      	subs	r2, r2, r0
 8003004:	eb63 0301 	sbc.w	r3, r3, r1
 8003008:	f04f 0000 	mov.w	r0, #0
 800300c:	f04f 0100 	mov.w	r1, #0
 8003010:	00d9      	lsls	r1, r3, #3
 8003012:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003016:	00d0      	lsls	r0, r2, #3
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	eb12 0208 	adds.w	r2, r2, r8
 8003020:	eb43 0309 	adc.w	r3, r3, r9
 8003024:	f04f 0000 	mov.w	r0, #0
 8003028:	f04f 0100 	mov.w	r1, #0
 800302c:	0259      	lsls	r1, r3, #9
 800302e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003032:	0250      	lsls	r0, r2, #9
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4610      	mov	r0, r2
 800303a:	4619      	mov	r1, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	461a      	mov	r2, r3
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	f7fd fd12 	bl	8000a6c <__aeabi_uldivmod>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4613      	mov	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	e04a      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003052:	4b31      	ldr	r3, [pc, #196]	; (8003118 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	099b      	lsrs	r3, r3, #6
 8003058:	461a      	mov	r2, r3
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003062:	f04f 0100 	mov.w	r1, #0
 8003066:	ea02 0400 	and.w	r4, r2, r0
 800306a:	ea03 0501 	and.w	r5, r3, r1
 800306e:	4620      	mov	r0, r4
 8003070:	4629      	mov	r1, r5
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	014b      	lsls	r3, r1, #5
 800307c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003080:	0142      	lsls	r2, r0, #5
 8003082:	4610      	mov	r0, r2
 8003084:	4619      	mov	r1, r3
 8003086:	1b00      	subs	r0, r0, r4
 8003088:	eb61 0105 	sbc.w	r1, r1, r5
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	018b      	lsls	r3, r1, #6
 8003096:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800309a:	0182      	lsls	r2, r0, #6
 800309c:	1a12      	subs	r2, r2, r0
 800309e:	eb63 0301 	sbc.w	r3, r3, r1
 80030a2:	f04f 0000 	mov.w	r0, #0
 80030a6:	f04f 0100 	mov.w	r1, #0
 80030aa:	00d9      	lsls	r1, r3, #3
 80030ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030b0:	00d0      	lsls	r0, r2, #3
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	1912      	adds	r2, r2, r4
 80030b8:	eb45 0303 	adc.w	r3, r5, r3
 80030bc:	f04f 0000 	mov.w	r0, #0
 80030c0:	f04f 0100 	mov.w	r1, #0
 80030c4:	0299      	lsls	r1, r3, #10
 80030c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80030ca:	0290      	lsls	r0, r2, #10
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4610      	mov	r0, r2
 80030d2:	4619      	mov	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	461a      	mov	r2, r3
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	f7fd fcc6 	bl	8000a6c <__aeabi_uldivmod>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4613      	mov	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	0c1b      	lsrs	r3, r3, #16
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	3301      	adds	r3, #1
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003100:	60bb      	str	r3, [r7, #8]
      break;
 8003102:	e002      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003104:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003106:	60bb      	str	r3, [r7, #8]
      break;
 8003108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800310a:	68bb      	ldr	r3, [r7, #8]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003116:	bf00      	nop
 8003118:	40023800 	.word	0x40023800
 800311c:	00f42400 	.word	0x00f42400
 8003120:	007a1200 	.word	0x007a1200

08003124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003128:	4b03      	ldr	r3, [pc, #12]	; (8003138 <HAL_RCC_GetHCLKFreq+0x14>)
 800312a:	681b      	ldr	r3, [r3, #0]
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000000 	.word	0x20000000

0800313c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003140:	f7ff fff0 	bl	8003124 <HAL_RCC_GetHCLKFreq>
 8003144:	4602      	mov	r2, r0
 8003146:	4b05      	ldr	r3, [pc, #20]	; (800315c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	0a9b      	lsrs	r3, r3, #10
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	4903      	ldr	r1, [pc, #12]	; (8003160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003152:	5ccb      	ldrb	r3, [r1, r3]
 8003154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003158:	4618      	mov	r0, r3
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40023800 	.word	0x40023800
 8003160:	0800558c 	.word	0x0800558c

08003164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003168:	f7ff ffdc 	bl	8003124 <HAL_RCC_GetHCLKFreq>
 800316c:	4602      	mov	r2, r0
 800316e:	4b05      	ldr	r3, [pc, #20]	; (8003184 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	0b5b      	lsrs	r3, r3, #13
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	4903      	ldr	r1, [pc, #12]	; (8003188 <HAL_RCC_GetPCLK2Freq+0x24>)
 800317a:	5ccb      	ldrb	r3, [r1, r3]
 800317c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003180:	4618      	mov	r0, r3
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40023800 	.word	0x40023800
 8003188:	0800558c 	.word	0x0800558c

0800318c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e041      	b.n	8003222 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fe fa5a 	bl	800166c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3304      	adds	r3, #4
 80031c8:	4619      	mov	r1, r3
 80031ca:	4610      	mov	r0, r2
 80031cc:	f000 fb58 	bl	8003880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d104      	bne.n	800324a <HAL_TIM_IC_Start_IT+0x1e>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003246:	b2db      	uxtb	r3, r3
 8003248:	e013      	b.n	8003272 <HAL_TIM_IC_Start_IT+0x46>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b04      	cmp	r3, #4
 800324e:	d104      	bne.n	800325a <HAL_TIM_IC_Start_IT+0x2e>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003256:	b2db      	uxtb	r3, r3
 8003258:	e00b      	b.n	8003272 <HAL_TIM_IC_Start_IT+0x46>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b08      	cmp	r3, #8
 800325e:	d104      	bne.n	800326a <HAL_TIM_IC_Start_IT+0x3e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003266:	b2db      	uxtb	r3, r3
 8003268:	e003      	b.n	8003272 <HAL_TIM_IC_Start_IT+0x46>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003270:	b2db      	uxtb	r3, r3
 8003272:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d104      	bne.n	8003284 <HAL_TIM_IC_Start_IT+0x58>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003280:	b2db      	uxtb	r3, r3
 8003282:	e013      	b.n	80032ac <HAL_TIM_IC_Start_IT+0x80>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2b04      	cmp	r3, #4
 8003288:	d104      	bne.n	8003294 <HAL_TIM_IC_Start_IT+0x68>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003290:	b2db      	uxtb	r3, r3
 8003292:	e00b      	b.n	80032ac <HAL_TIM_IC_Start_IT+0x80>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	2b08      	cmp	r3, #8
 8003298:	d104      	bne.n	80032a4 <HAL_TIM_IC_Start_IT+0x78>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	e003      	b.n	80032ac <HAL_TIM_IC_Start_IT+0x80>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80032ae:	7bbb      	ldrb	r3, [r7, #14]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d102      	bne.n	80032ba <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80032b4:	7b7b      	ldrb	r3, [r7, #13]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d001      	beq.n	80032be <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e0c2      	b.n	8003444 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d104      	bne.n	80032ce <HAL_TIM_IC_Start_IT+0xa2>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032cc:	e013      	b.n	80032f6 <HAL_TIM_IC_Start_IT+0xca>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d104      	bne.n	80032de <HAL_TIM_IC_Start_IT+0xb2>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032dc:	e00b      	b.n	80032f6 <HAL_TIM_IC_Start_IT+0xca>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d104      	bne.n	80032ee <HAL_TIM_IC_Start_IT+0xc2>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032ec:	e003      	b.n	80032f6 <HAL_TIM_IC_Start_IT+0xca>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2202      	movs	r2, #2
 80032f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d104      	bne.n	8003306 <HAL_TIM_IC_Start_IT+0xda>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003304:	e013      	b.n	800332e <HAL_TIM_IC_Start_IT+0x102>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b04      	cmp	r3, #4
 800330a:	d104      	bne.n	8003316 <HAL_TIM_IC_Start_IT+0xea>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003314:	e00b      	b.n	800332e <HAL_TIM_IC_Start_IT+0x102>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b08      	cmp	r3, #8
 800331a:	d104      	bne.n	8003326 <HAL_TIM_IC_Start_IT+0xfa>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003324:	e003      	b.n	800332e <HAL_TIM_IC_Start_IT+0x102>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2202      	movs	r2, #2
 800332a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b0c      	cmp	r3, #12
 8003332:	d841      	bhi.n	80033b8 <HAL_TIM_IC_Start_IT+0x18c>
 8003334:	a201      	add	r2, pc, #4	; (adr r2, 800333c <HAL_TIM_IC_Start_IT+0x110>)
 8003336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333a:	bf00      	nop
 800333c:	08003371 	.word	0x08003371
 8003340:	080033b9 	.word	0x080033b9
 8003344:	080033b9 	.word	0x080033b9
 8003348:	080033b9 	.word	0x080033b9
 800334c:	08003383 	.word	0x08003383
 8003350:	080033b9 	.word	0x080033b9
 8003354:	080033b9 	.word	0x080033b9
 8003358:	080033b9 	.word	0x080033b9
 800335c:	08003395 	.word	0x08003395
 8003360:	080033b9 	.word	0x080033b9
 8003364:	080033b9 	.word	0x080033b9
 8003368:	080033b9 	.word	0x080033b9
 800336c:	080033a7 	.word	0x080033a7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0202 	orr.w	r2, r2, #2
 800337e:	60da      	str	r2, [r3, #12]
      break;
 8003380:	e01d      	b.n	80033be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0204 	orr.w	r2, r2, #4
 8003390:	60da      	str	r2, [r3, #12]
      break;
 8003392:	e014      	b.n	80033be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0208 	orr.w	r2, r2, #8
 80033a2:	60da      	str	r2, [r3, #12]
      break;
 80033a4:	e00b      	b.n	80033be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 0210 	orr.w	r2, r2, #16
 80033b4:	60da      	str	r2, [r3, #12]
      break;
 80033b6:	e002      	b.n	80033be <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
      break;
 80033bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80033be:	7bfb      	ldrb	r3, [r7, #15]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d13e      	bne.n	8003442 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2201      	movs	r2, #1
 80033ca:	6839      	ldr	r1, [r7, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fbf5 	bl	8003bbc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a1d      	ldr	r2, [pc, #116]	; (800344c <HAL_TIM_IC_Start_IT+0x220>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d018      	beq.n	800340e <HAL_TIM_IC_Start_IT+0x1e2>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e4:	d013      	beq.n	800340e <HAL_TIM_IC_Start_IT+0x1e2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a19      	ldr	r2, [pc, #100]	; (8003450 <HAL_TIM_IC_Start_IT+0x224>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00e      	beq.n	800340e <HAL_TIM_IC_Start_IT+0x1e2>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a17      	ldr	r2, [pc, #92]	; (8003454 <HAL_TIM_IC_Start_IT+0x228>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d009      	beq.n	800340e <HAL_TIM_IC_Start_IT+0x1e2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a16      	ldr	r2, [pc, #88]	; (8003458 <HAL_TIM_IC_Start_IT+0x22c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d004      	beq.n	800340e <HAL_TIM_IC_Start_IT+0x1e2>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a14      	ldr	r2, [pc, #80]	; (800345c <HAL_TIM_IC_Start_IT+0x230>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d111      	bne.n	8003432 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b06      	cmp	r3, #6
 800341e:	d010      	beq.n	8003442 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003430:	e007      	b.n	8003442 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 0201 	orr.w	r2, r2, #1
 8003440:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003442:	7bfb      	ldrb	r3, [r7, #15]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40010000 	.word	0x40010000
 8003450:	40000400 	.word	0x40000400
 8003454:	40000800 	.word	0x40000800
 8003458:	40000c00 	.word	0x40000c00
 800345c:	40014000 	.word	0x40014000

08003460 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b02      	cmp	r3, #2
 8003474:	d122      	bne.n	80034bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b02      	cmp	r3, #2
 8003482:	d11b      	bne.n	80034bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0202 	mvn.w	r2, #2
 800348c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fd fd6c 	bl	8000f80 <HAL_TIM_IC_CaptureCallback>
 80034a8:	e005      	b.n	80034b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f9ca 	bl	8003844 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f9d1 	bl	8003858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d122      	bne.n	8003510 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d11b      	bne.n	8003510 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0204 	mvn.w	r2, #4
 80034e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2202      	movs	r2, #2
 80034e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fd fd42 	bl	8000f80 <HAL_TIM_IC_CaptureCallback>
 80034fc:	e005      	b.n	800350a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f9a0 	bl	8003844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f9a7 	bl	8003858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b08      	cmp	r3, #8
 800351c:	d122      	bne.n	8003564 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b08      	cmp	r3, #8
 800352a:	d11b      	bne.n	8003564 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0208 	mvn.w	r2, #8
 8003534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2204      	movs	r2, #4
 800353a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fd fd18 	bl	8000f80 <HAL_TIM_IC_CaptureCallback>
 8003550:	e005      	b.n	800355e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f976 	bl	8003844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f97d 	bl	8003858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f003 0310 	and.w	r3, r3, #16
 800356e:	2b10      	cmp	r3, #16
 8003570:	d122      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b10      	cmp	r3, #16
 800357e:	d11b      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0210 	mvn.w	r2, #16
 8003588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2208      	movs	r2, #8
 800358e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fd fcee 	bl	8000f80 <HAL_TIM_IC_CaptureCallback>
 80035a4:	e005      	b.n	80035b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f94c 	bl	8003844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f953 	bl	8003858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d10e      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d107      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f06f 0201 	mvn.w	r2, #1
 80035dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f926 	bl	8003830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ee:	2b80      	cmp	r3, #128	; 0x80
 80035f0:	d10e      	bne.n	8003610 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fc:	2b80      	cmp	r3, #128	; 0x80
 80035fe:	d107      	bne.n	8003610 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fb74 	bl	8003cf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361a:	2b40      	cmp	r3, #64	; 0x40
 800361c:	d10e      	bne.n	800363c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003628:	2b40      	cmp	r3, #64	; 0x40
 800362a:	d107      	bne.n	800363c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f918 	bl	800386c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b20      	cmp	r3, #32
 8003648:	d10e      	bne.n	8003668 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b20      	cmp	r3, #32
 8003656:	d107      	bne.n	8003668 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0220 	mvn.w	r2, #32
 8003660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fb3e 	bl	8003ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003668:	bf00      	nop
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_TIM_IC_ConfigChannel+0x1e>
 800368a:	2302      	movs	r3, #2
 800368c:	e088      	b.n	80037a0 <HAL_TIM_IC_ConfigChannel+0x130>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d11b      	bne.n	80036d4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	6819      	ldr	r1, [r3, #0]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f000 f968 	bl	8003980 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699a      	ldr	r2, [r3, #24]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 020c 	bic.w	r2, r2, #12
 80036be:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6999      	ldr	r1, [r3, #24]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	619a      	str	r2, [r3, #24]
 80036d2:	e060      	b.n	8003796 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d11c      	bne.n	8003714 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	6819      	ldr	r1, [r3, #0]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f000 f9b1 	bl	8003a50 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699a      	ldr	r2, [r3, #24]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80036fc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6999      	ldr	r1, [r3, #24]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	021a      	lsls	r2, r3, #8
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	619a      	str	r2, [r3, #24]
 8003712:	e040      	b.n	8003796 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b08      	cmp	r3, #8
 8003718:	d11b      	bne.n	8003752 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	6819      	ldr	r1, [r3, #0]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f000 f9ce 	bl	8003aca <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69da      	ldr	r2, [r3, #28]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 020c 	bic.w	r2, r2, #12
 800373c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69d9      	ldr	r1, [r3, #28]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	61da      	str	r2, [r3, #28]
 8003750:	e021      	b.n	8003796 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b0c      	cmp	r3, #12
 8003756:	d11c      	bne.n	8003792 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6818      	ldr	r0, [r3, #0]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	6819      	ldr	r1, [r3, #0]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f000 f9eb 	bl	8003b42 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	69da      	ldr	r2, [r3, #28]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800377a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69d9      	ldr	r1, [r3, #28]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	021a      	lsls	r2, r3, #8
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	61da      	str	r2, [r3, #28]
 8003790:	e001      	b.n	8003796 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800379e:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b0c      	cmp	r3, #12
 80037ba:	d831      	bhi.n	8003820 <HAL_TIM_ReadCapturedValue+0x78>
 80037bc:	a201      	add	r2, pc, #4	; (adr r2, 80037c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80037be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c2:	bf00      	nop
 80037c4:	080037f9 	.word	0x080037f9
 80037c8:	08003821 	.word	0x08003821
 80037cc:	08003821 	.word	0x08003821
 80037d0:	08003821 	.word	0x08003821
 80037d4:	08003803 	.word	0x08003803
 80037d8:	08003821 	.word	0x08003821
 80037dc:	08003821 	.word	0x08003821
 80037e0:	08003821 	.word	0x08003821
 80037e4:	0800380d 	.word	0x0800380d
 80037e8:	08003821 	.word	0x08003821
 80037ec:	08003821 	.word	0x08003821
 80037f0:	08003821 	.word	0x08003821
 80037f4:	08003817 	.word	0x08003817
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fe:	60fb      	str	r3, [r7, #12]

      break;
 8003800:	e00f      	b.n	8003822 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	60fb      	str	r3, [r7, #12]

      break;
 800380a:	e00a      	b.n	8003822 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003812:	60fb      	str	r3, [r7, #12]

      break;
 8003814:	e005      	b.n	8003822 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	60fb      	str	r3, [r7, #12]

      break;
 800381e:	e000      	b.n	8003822 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003820:	bf00      	nop
  }

  return tmpreg;
 8003822:	68fb      	ldr	r3, [r7, #12]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a34      	ldr	r2, [pc, #208]	; (8003964 <TIM_Base_SetConfig+0xe4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00f      	beq.n	80038b8 <TIM_Base_SetConfig+0x38>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389e:	d00b      	beq.n	80038b8 <TIM_Base_SetConfig+0x38>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a31      	ldr	r2, [pc, #196]	; (8003968 <TIM_Base_SetConfig+0xe8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d007      	beq.n	80038b8 <TIM_Base_SetConfig+0x38>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a30      	ldr	r2, [pc, #192]	; (800396c <TIM_Base_SetConfig+0xec>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d003      	beq.n	80038b8 <TIM_Base_SetConfig+0x38>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a2f      	ldr	r2, [pc, #188]	; (8003970 <TIM_Base_SetConfig+0xf0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d108      	bne.n	80038ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a25      	ldr	r2, [pc, #148]	; (8003964 <TIM_Base_SetConfig+0xe4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d01b      	beq.n	800390a <TIM_Base_SetConfig+0x8a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d8:	d017      	beq.n	800390a <TIM_Base_SetConfig+0x8a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a22      	ldr	r2, [pc, #136]	; (8003968 <TIM_Base_SetConfig+0xe8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d013      	beq.n	800390a <TIM_Base_SetConfig+0x8a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a21      	ldr	r2, [pc, #132]	; (800396c <TIM_Base_SetConfig+0xec>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00f      	beq.n	800390a <TIM_Base_SetConfig+0x8a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a20      	ldr	r2, [pc, #128]	; (8003970 <TIM_Base_SetConfig+0xf0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00b      	beq.n	800390a <TIM_Base_SetConfig+0x8a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a1f      	ldr	r2, [pc, #124]	; (8003974 <TIM_Base_SetConfig+0xf4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d007      	beq.n	800390a <TIM_Base_SetConfig+0x8a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a1e      	ldr	r2, [pc, #120]	; (8003978 <TIM_Base_SetConfig+0xf8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d003      	beq.n	800390a <TIM_Base_SetConfig+0x8a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a1d      	ldr	r2, [pc, #116]	; (800397c <TIM_Base_SetConfig+0xfc>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d108      	bne.n	800391c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4313      	orrs	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a08      	ldr	r2, [pc, #32]	; (8003964 <TIM_Base_SetConfig+0xe4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d103      	bne.n	8003950 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	615a      	str	r2, [r3, #20]
}
 8003956:	bf00      	nop
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40010000 	.word	0x40010000
 8003968:	40000400 	.word	0x40000400
 800396c:	40000800 	.word	0x40000800
 8003970:	40000c00 	.word	0x40000c00
 8003974:	40014000 	.word	0x40014000
 8003978:	40014400 	.word	0x40014400
 800397c:	40014800 	.word	0x40014800

08003980 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
 800398c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f023 0201 	bic.w	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4a24      	ldr	r2, [pc, #144]	; (8003a3c <TIM_TI1_SetConfig+0xbc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d013      	beq.n	80039d6 <TIM_TI1_SetConfig+0x56>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b4:	d00f      	beq.n	80039d6 <TIM_TI1_SetConfig+0x56>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4a21      	ldr	r2, [pc, #132]	; (8003a40 <TIM_TI1_SetConfig+0xc0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00b      	beq.n	80039d6 <TIM_TI1_SetConfig+0x56>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4a20      	ldr	r2, [pc, #128]	; (8003a44 <TIM_TI1_SetConfig+0xc4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d007      	beq.n	80039d6 <TIM_TI1_SetConfig+0x56>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4a1f      	ldr	r2, [pc, #124]	; (8003a48 <TIM_TI1_SetConfig+0xc8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d003      	beq.n	80039d6 <TIM_TI1_SetConfig+0x56>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4a1e      	ldr	r2, [pc, #120]	; (8003a4c <TIM_TI1_SetConfig+0xcc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d101      	bne.n	80039da <TIM_TI1_SetConfig+0x5a>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <TIM_TI1_SetConfig+0x5c>
 80039da:	2300      	movs	r3, #0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d008      	beq.n	80039f2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f023 0303 	bic.w	r3, r3, #3
 80039e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	e003      	b.n	80039fa <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f043 0301 	orr.w	r3, r3, #1
 80039f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f023 030a 	bic.w	r3, r3, #10
 8003a14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f003 030a 	and.w	r3, r3, #10
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	621a      	str	r2, [r3, #32]
}
 8003a2e:	bf00      	nop
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40010000 	.word	0x40010000
 8003a40:	40000400 	.word	0x40000400
 8003a44:	40000800 	.word	0x40000800
 8003a48:	40000c00 	.word	0x40000c00
 8003a4c:	40014000 	.word	0x40014000

08003a50 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	f023 0210 	bic.w	r2, r3, #16
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	031b      	lsls	r3, r3, #12
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003aa2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	621a      	str	r2, [r3, #32]
}
 8003abe:	bf00      	nop
 8003ac0:	371c      	adds	r7, #28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b087      	sub	sp, #28
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f023 0303 	bic.w	r3, r3, #3
 8003af6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b06:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003b1a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	021b      	lsls	r3, r3, #8
 8003b20:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	621a      	str	r2, [r3, #32]
}
 8003b36:	bf00      	nop
 8003b38:	371c      	adds	r7, #28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b087      	sub	sp, #28
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	607a      	str	r2, [r7, #4]
 8003b4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b6e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	021b      	lsls	r3, r3, #8
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	031b      	lsls	r3, r3, #12
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003b94:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	031b      	lsls	r3, r3, #12
 8003b9a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	621a      	str	r2, [r3, #32]
}
 8003bb0:	bf00      	nop
 8003bb2:	371c      	adds	r7, #28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f003 031f 	and.w	r3, r3, #31
 8003bce:	2201      	movs	r2, #1
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a1a      	ldr	r2, [r3, #32]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	401a      	ands	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a1a      	ldr	r2, [r3, #32]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f003 031f 	and.w	r3, r3, #31
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	621a      	str	r2, [r3, #32]
}
 8003bfa:	bf00      	nop
 8003bfc:	371c      	adds	r7, #28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
	...

08003c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e050      	b.n	8003cc2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1c      	ldr	r2, [pc, #112]	; (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d018      	beq.n	8003c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c6c:	d013      	beq.n	8003c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a18      	ldr	r2, [pc, #96]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00e      	beq.n	8003c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a16      	ldr	r2, [pc, #88]	; (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d009      	beq.n	8003c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a15      	ldr	r2, [pc, #84]	; (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d004      	beq.n	8003c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a13      	ldr	r2, [pc, #76]	; (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d10c      	bne.n	8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40010000 	.word	0x40010000
 8003cd4:	40000400 	.word	0x40000400
 8003cd8:	40000800 	.word	0x40000800
 8003cdc:	40000c00 	.word	0x40000c00
 8003ce0:	40014000 	.word	0x40014000

08003ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e03f      	b.n	8003d9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fd fcea 	bl	800170c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2224      	movs	r2, #36	; 0x24
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 fddb 	bl	800490c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695a      	ldr	r2, [r3, #20]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68da      	ldr	r2, [r3, #12]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b08a      	sub	sp, #40	; 0x28
 8003daa:	af02      	add	r7, sp, #8
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	603b      	str	r3, [r7, #0]
 8003db2:	4613      	mov	r3, r2
 8003db4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d17c      	bne.n	8003ec0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <HAL_UART_Transmit+0x2c>
 8003dcc:	88fb      	ldrh	r3, [r7, #6]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e075      	b.n	8003ec2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_UART_Transmit+0x3e>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e06e      	b.n	8003ec2 <HAL_UART_Transmit+0x11c>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2221      	movs	r2, #33	; 0x21
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dfa:	f7fd fe23 	bl	8001a44 <HAL_GetTick>
 8003dfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	88fa      	ldrh	r2, [r7, #6]
 8003e04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	88fa      	ldrh	r2, [r7, #6]
 8003e0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e14:	d108      	bne.n	8003e28 <HAL_UART_Transmit+0x82>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d104      	bne.n	8003e28 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	e003      	b.n	8003e30 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e38:	e02a      	b.n	8003e90 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2200      	movs	r2, #0
 8003e42:	2180      	movs	r1, #128	; 0x80
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 fb1f 	bl	8004488 <UART_WaitOnFlagUntilTimeout>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e036      	b.n	8003ec2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10b      	bne.n	8003e72 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	3302      	adds	r3, #2
 8003e6e:	61bb      	str	r3, [r7, #24]
 8003e70:	e007      	b.n	8003e82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	781a      	ldrb	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1cf      	bne.n	8003e3a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2140      	movs	r1, #64	; 0x40
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 faef 	bl	8004488 <UART_WaitOnFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e006      	b.n	8003ec2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e000      	b.n	8003ec2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ec0:	2302      	movs	r3, #2
  }
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	d11d      	bne.n	8003f20 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <HAL_UART_Receive_IT+0x26>
 8003eea:	88fb      	ldrh	r3, [r7, #6]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e016      	b.n	8003f22 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_UART_Receive_IT+0x38>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e00f      	b.n	8003f22 <HAL_UART_Receive_IT+0x58>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f10:	88fb      	ldrh	r3, [r7, #6]
 8003f12:	461a      	mov	r2, r3
 8003f14:	68b9      	ldr	r1, [r7, #8]
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 fb24 	bl	8004564 <UART_Start_Receive_IT>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	e000      	b.n	8003f22 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003f20:	2302      	movs	r3, #2
  }
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b0ba      	sub	sp, #232	; 0xe8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10f      	bne.n	8003f92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <HAL_UART_IRQHandler+0x66>
 8003f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 fc03 	bl	8004796 <UART_Receive_IT>
      return;
 8003f90:	e256      	b.n	8004440 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 80de 	beq.w	8004158 <HAL_UART_IRQHandler+0x22c>
 8003f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d106      	bne.n	8003fb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80d1 	beq.w	8004158 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <HAL_UART_IRQHandler+0xae>
 8003fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	f043 0201 	orr.w	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00b      	beq.n	8003ffe <HAL_UART_IRQHandler+0xd2>
 8003fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d005      	beq.n	8003ffe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	f043 0202 	orr.w	r2, r3, #2
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00b      	beq.n	8004022 <HAL_UART_IRQHandler+0xf6>
 800400a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f043 0204 	orr.w	r2, r3, #4
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d011      	beq.n	8004052 <HAL_UART_IRQHandler+0x126>
 800402e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	d105      	bne.n	8004046 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800403a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d005      	beq.n	8004052 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f043 0208 	orr.w	r2, r3, #8
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 81ed 	beq.w	8004436 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800405c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	2b00      	cmp	r3, #0
 8004066:	d008      	beq.n	800407a <HAL_UART_IRQHandler+0x14e>
 8004068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 fb8e 	bl	8004796 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004084:	2b40      	cmp	r3, #64	; 0x40
 8004086:	bf0c      	ite	eq
 8004088:	2301      	moveq	r3, #1
 800408a:	2300      	movne	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d103      	bne.n	80040a6 <HAL_UART_IRQHandler+0x17a>
 800409e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d04f      	beq.n	8004146 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fa96 	bl	80045d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b6:	2b40      	cmp	r3, #64	; 0x40
 80040b8:	d141      	bne.n	800413e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3314      	adds	r3, #20
 80040c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040c8:	e853 3f00 	ldrex	r3, [r3]
 80040cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80040d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3314      	adds	r3, #20
 80040e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80040e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80040ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80040f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1d9      	bne.n	80040ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410a:	2b00      	cmp	r3, #0
 800410c:	d013      	beq.n	8004136 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	4a7d      	ldr	r2, [pc, #500]	; (8004308 <HAL_UART_IRQHandler+0x3dc>)
 8004114:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411a:	4618      	mov	r0, r3
 800411c:	f7fe fa01 	bl	8002522 <HAL_DMA_Abort_IT>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d016      	beq.n	8004154 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004130:	4610      	mov	r0, r2
 8004132:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004134:	e00e      	b.n	8004154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f990 	bl	800445c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800413c:	e00a      	b.n	8004154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f98c 	bl	800445c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004144:	e006      	b.n	8004154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f988 	bl	800445c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004152:	e170      	b.n	8004436 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004154:	bf00      	nop
    return;
 8004156:	e16e      	b.n	8004436 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	2b01      	cmp	r3, #1
 800415e:	f040 814a 	bne.w	80043f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 8143 	beq.w	80043f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004174:	f003 0310 	and.w	r3, r3, #16
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 813c 	beq.w	80043f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800417e:	2300      	movs	r3, #0
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419e:	2b40      	cmp	r3, #64	; 0x40
 80041a0:	f040 80b4 	bne.w	800430c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 8140 	beq.w	800443a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041c2:	429a      	cmp	r2, r3
 80041c4:	f080 8139 	bcs.w	800443a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041da:	f000 8088 	beq.w	80042ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	330c      	adds	r3, #12
 80041e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041ec:	e853 3f00 	ldrex	r3, [r3]
 80041f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80041f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	330c      	adds	r3, #12
 8004206:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800420a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800420e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004212:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004216:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800421a:	e841 2300 	strex	r3, r2, [r1]
 800421e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004222:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1d9      	bne.n	80041de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3314      	adds	r3, #20
 8004230:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004234:	e853 3f00 	ldrex	r3, [r3]
 8004238:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800423a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800423c:	f023 0301 	bic.w	r3, r3, #1
 8004240:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3314      	adds	r3, #20
 800424a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800424e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004252:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004256:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800425a:	e841 2300 	strex	r3, r2, [r1]
 800425e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1e1      	bne.n	800422a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3314      	adds	r3, #20
 800426c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004270:	e853 3f00 	ldrex	r3, [r3]
 8004274:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800427c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3314      	adds	r3, #20
 8004286:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800428a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800428c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004290:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004292:	e841 2300 	strex	r3, r2, [r1]
 8004296:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e3      	bne.n	8004266 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2220      	movs	r2, #32
 80042a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	330c      	adds	r3, #12
 80042b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b6:	e853 3f00 	ldrex	r3, [r3]
 80042ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042be:	f023 0310 	bic.w	r3, r3, #16
 80042c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	330c      	adds	r3, #12
 80042cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80042d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80042d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042d8:	e841 2300 	strex	r3, r2, [r1]
 80042dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1e3      	bne.n	80042ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fe f8aa 	bl	8002442 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	4619      	mov	r1, r3
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f8b6 	bl	8004470 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004304:	e099      	b.n	800443a <HAL_UART_IRQHandler+0x50e>
 8004306:	bf00      	nop
 8004308:	0800469f 	.word	0x0800469f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004314:	b29b      	uxth	r3, r3
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 808b 	beq.w	800443e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004328:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 8086 	beq.w	800443e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	330c      	adds	r3, #12
 8004338:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004344:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004348:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	330c      	adds	r3, #12
 8004352:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004356:	647a      	str	r2, [r7, #68]	; 0x44
 8004358:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800435c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800435e:	e841 2300 	strex	r3, r2, [r1]
 8004362:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1e3      	bne.n	8004332 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3314      	adds	r3, #20
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	623b      	str	r3, [r7, #32]
   return(result);
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	f023 0301 	bic.w	r3, r3, #1
 8004380:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3314      	adds	r3, #20
 800438a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800438e:	633a      	str	r2, [r7, #48]	; 0x30
 8004390:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1e3      	bne.n	800436a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	330c      	adds	r3, #12
 80043b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	e853 3f00 	ldrex	r3, [r3]
 80043be:	60fb      	str	r3, [r7, #12]
   return(result);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f023 0310 	bic.w	r3, r3, #16
 80043c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	330c      	adds	r3, #12
 80043d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80043d4:	61fa      	str	r2, [r7, #28]
 80043d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d8:	69b9      	ldr	r1, [r7, #24]
 80043da:	69fa      	ldr	r2, [r7, #28]
 80043dc:	e841 2300 	strex	r3, r2, [r1]
 80043e0:	617b      	str	r3, [r7, #20]
   return(result);
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1e3      	bne.n	80043b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043ec:	4619      	mov	r1, r3
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f83e 	bl	8004470 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043f4:	e023      	b.n	800443e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <HAL_UART_IRQHandler+0x4ea>
 8004402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f959 	bl	80046c6 <UART_Transmit_IT>
    return;
 8004414:	e014      	b.n	8004440 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800441a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00e      	beq.n	8004440 <HAL_UART_IRQHandler+0x514>
 8004422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d008      	beq.n	8004440 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f999 	bl	8004766 <UART_EndTransmit_IT>
    return;
 8004434:	e004      	b.n	8004440 <HAL_UART_IRQHandler+0x514>
    return;
 8004436:	bf00      	nop
 8004438:	e002      	b.n	8004440 <HAL_UART_IRQHandler+0x514>
      return;
 800443a:	bf00      	nop
 800443c:	e000      	b.n	8004440 <HAL_UART_IRQHandler+0x514>
      return;
 800443e:	bf00      	nop
  }
}
 8004440:	37e8      	adds	r7, #232	; 0xe8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop

08004448 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b090      	sub	sp, #64	; 0x40
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	4613      	mov	r3, r2
 8004496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004498:	e050      	b.n	800453c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800449c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a0:	d04c      	beq.n	800453c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d007      	beq.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80044a8:	f7fd facc 	bl	8001a44 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d241      	bcs.n	800453c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	330c      	adds	r3, #12
 80044be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	330c      	adds	r3, #12
 80044d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044d8:	637a      	str	r2, [r7, #52]	; 0x34
 80044da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e5      	bne.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3314      	adds	r3, #20
 80044f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	e853 3f00 	ldrex	r3, [r3]
 80044fa:	613b      	str	r3, [r7, #16]
   return(result);
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	63bb      	str	r3, [r7, #56]	; 0x38
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3314      	adds	r3, #20
 800450a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800450c:	623a      	str	r2, [r7, #32]
 800450e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004510:	69f9      	ldr	r1, [r7, #28]
 8004512:	6a3a      	ldr	r2, [r7, #32]
 8004514:	e841 2300 	strex	r3, r2, [r1]
 8004518:	61bb      	str	r3, [r7, #24]
   return(result);
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e5      	bne.n	80044ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e00f      	b.n	800455c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	4013      	ands	r3, r2
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	429a      	cmp	r2, r3
 800454a:	bf0c      	ite	eq
 800454c:	2301      	moveq	r3, #1
 800454e:	2300      	movne	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	461a      	mov	r2, r3
 8004554:	79fb      	ldrb	r3, [r7, #7]
 8004556:	429a      	cmp	r2, r3
 8004558:	d09f      	beq.n	800449a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3740      	adds	r7, #64	; 0x40
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	4613      	mov	r3, r2
 8004570:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	88fa      	ldrh	r2, [r7, #6]
 800457c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	88fa      	ldrh	r2, [r7, #6]
 8004582:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2222      	movs	r2, #34	; 0x22
 800458e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045a8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695a      	ldr	r2, [r3, #20]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0201 	orr.w	r2, r2, #1
 80045b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0220 	orr.w	r2, r2, #32
 80045c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045d8:	b480      	push	{r7}
 80045da:	b095      	sub	sp, #84	; 0x54
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	330c      	adds	r3, #12
 80045e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ea:	e853 3f00 	ldrex	r3, [r3]
 80045ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	330c      	adds	r3, #12
 80045fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004600:	643a      	str	r2, [r7, #64]	; 0x40
 8004602:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004604:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004606:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004608:	e841 2300 	strex	r3, r2, [r1]
 800460c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800460e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e5      	bne.n	80045e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3314      	adds	r3, #20
 800461a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	e853 3f00 	ldrex	r3, [r3]
 8004622:	61fb      	str	r3, [r7, #28]
   return(result);
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f023 0301 	bic.w	r3, r3, #1
 800462a:	64bb      	str	r3, [r7, #72]	; 0x48
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3314      	adds	r3, #20
 8004632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004634:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004636:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800463a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800463c:	e841 2300 	strex	r3, r2, [r1]
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e5      	bne.n	8004614 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464c:	2b01      	cmp	r3, #1
 800464e:	d119      	bne.n	8004684 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	330c      	adds	r3, #12
 8004656:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	e853 3f00 	ldrex	r3, [r3]
 800465e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f023 0310 	bic.w	r3, r3, #16
 8004666:	647b      	str	r3, [r7, #68]	; 0x44
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	330c      	adds	r3, #12
 800466e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004670:	61ba      	str	r2, [r7, #24]
 8004672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004674:	6979      	ldr	r1, [r7, #20]
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	e841 2300 	strex	r3, r2, [r1]
 800467c:	613b      	str	r3, [r7, #16]
   return(result);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e5      	bne.n	8004650 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004692:	bf00      	nop
 8004694:	3754      	adds	r7, #84	; 0x54
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f7ff fecf 	bl	800445c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046be:	bf00      	nop
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b085      	sub	sp, #20
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b21      	cmp	r3, #33	; 0x21
 80046d8:	d13e      	bne.n	8004758 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e2:	d114      	bne.n	800470e <UART_Transmit_IT+0x48>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d110      	bne.n	800470e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004700:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	1c9a      	adds	r2, r3, #2
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	621a      	str	r2, [r3, #32]
 800470c:	e008      	b.n	8004720 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	1c59      	adds	r1, r3, #1
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6211      	str	r1, [r2, #32]
 8004718:	781a      	ldrb	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004724:	b29b      	uxth	r3, r3
 8004726:	3b01      	subs	r3, #1
 8004728:	b29b      	uxth	r3, r3
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	4619      	mov	r1, r3
 800472e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10f      	bne.n	8004754 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004742:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004752:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	e000      	b.n	800475a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004758:	2302      	movs	r3, #2
  }
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800477c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7ff fe5e 	bl	8004448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b08c      	sub	sp, #48	; 0x30
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b22      	cmp	r3, #34	; 0x22
 80047a8:	f040 80ab 	bne.w	8004902 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b4:	d117      	bne.n	80047e6 <UART_Receive_IT+0x50>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d113      	bne.n	80047e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047be:	2300      	movs	r3, #0
 80047c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047de:	1c9a      	adds	r2, r3, #2
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	629a      	str	r2, [r3, #40]	; 0x28
 80047e4:	e026      	b.n	8004834 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f8:	d007      	beq.n	800480a <UART_Receive_IT+0x74>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10a      	bne.n	8004818 <UART_Receive_IT+0x82>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d106      	bne.n	8004818 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	b2da      	uxtb	r2, r3
 8004812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004814:	701a      	strb	r2, [r3, #0]
 8004816:	e008      	b.n	800482a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	b2db      	uxtb	r3, r3
 8004820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004824:	b2da      	uxtb	r2, r3
 8004826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004828:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004838:	b29b      	uxth	r3, r3
 800483a:	3b01      	subs	r3, #1
 800483c:	b29b      	uxth	r3, r3
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	4619      	mov	r1, r3
 8004842:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004844:	2b00      	cmp	r3, #0
 8004846:	d15a      	bne.n	80048fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0220 	bic.w	r2, r2, #32
 8004856:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004866:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695a      	ldr	r2, [r3, #20]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0201 	bic.w	r2, r2, #1
 8004876:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2220      	movs	r2, #32
 800487c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	2b01      	cmp	r3, #1
 8004886:	d135      	bne.n	80048f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	330c      	adds	r3, #12
 8004894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	613b      	str	r3, [r7, #16]
   return(result);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f023 0310 	bic.w	r3, r3, #16
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	330c      	adds	r3, #12
 80048ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ae:	623a      	str	r2, [r7, #32]
 80048b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	69f9      	ldr	r1, [r7, #28]
 80048b4:	6a3a      	ldr	r2, [r7, #32]
 80048b6:	e841 2300 	strex	r3, r2, [r1]
 80048ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1e5      	bne.n	800488e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	d10a      	bne.n	80048e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048ea:	4619      	mov	r1, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7ff fdbf 	bl	8004470 <HAL_UARTEx_RxEventCallback>
 80048f2:	e002      	b.n	80048fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7fc fb03 	bl	8000f00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	e002      	b.n	8004904 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	e000      	b.n	8004904 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004902:	2302      	movs	r3, #2
  }
}
 8004904:	4618      	mov	r0, r3
 8004906:	3730      	adds	r7, #48	; 0x30
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800490c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004910:	b09f      	sub	sp, #124	; 0x7c
 8004912:	af00      	add	r7, sp, #0
 8004914:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004922:	68d9      	ldr	r1, [r3, #12]
 8004924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	ea40 0301 	orr.w	r3, r0, r1
 800492c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800492e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	431a      	orrs	r2, r3
 8004938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	431a      	orrs	r2, r3
 800493e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	4313      	orrs	r3, r2
 8004944:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004950:	f021 010c 	bic.w	r1, r1, #12
 8004954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800495a:	430b      	orrs	r3, r1
 800495c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800495e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800496a:	6999      	ldr	r1, [r3, #24]
 800496c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	ea40 0301 	orr.w	r3, r0, r1
 8004974:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	4bc5      	ldr	r3, [pc, #788]	; (8004c90 <UART_SetConfig+0x384>)
 800497c:	429a      	cmp	r2, r3
 800497e:	d004      	beq.n	800498a <UART_SetConfig+0x7e>
 8004980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	4bc3      	ldr	r3, [pc, #780]	; (8004c94 <UART_SetConfig+0x388>)
 8004986:	429a      	cmp	r2, r3
 8004988:	d103      	bne.n	8004992 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800498a:	f7fe fbeb 	bl	8003164 <HAL_RCC_GetPCLK2Freq>
 800498e:	6778      	str	r0, [r7, #116]	; 0x74
 8004990:	e002      	b.n	8004998 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004992:	f7fe fbd3 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 8004996:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a0:	f040 80b6 	bne.w	8004b10 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049a6:	461c      	mov	r4, r3
 80049a8:	f04f 0500 	mov.w	r5, #0
 80049ac:	4622      	mov	r2, r4
 80049ae:	462b      	mov	r3, r5
 80049b0:	1891      	adds	r1, r2, r2
 80049b2:	6439      	str	r1, [r7, #64]	; 0x40
 80049b4:	415b      	adcs	r3, r3
 80049b6:	647b      	str	r3, [r7, #68]	; 0x44
 80049b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049bc:	1912      	adds	r2, r2, r4
 80049be:	eb45 0303 	adc.w	r3, r5, r3
 80049c2:	f04f 0000 	mov.w	r0, #0
 80049c6:	f04f 0100 	mov.w	r1, #0
 80049ca:	00d9      	lsls	r1, r3, #3
 80049cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049d0:	00d0      	lsls	r0, r2, #3
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	1911      	adds	r1, r2, r4
 80049d8:	6639      	str	r1, [r7, #96]	; 0x60
 80049da:	416b      	adcs	r3, r5
 80049dc:	667b      	str	r3, [r7, #100]	; 0x64
 80049de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	461a      	mov	r2, r3
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	1891      	adds	r1, r2, r2
 80049ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80049ec:	415b      	adcs	r3, r3
 80049ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049f4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80049f8:	f7fc f838 	bl	8000a6c <__aeabi_uldivmod>
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4ba5      	ldr	r3, [pc, #660]	; (8004c98 <UART_SetConfig+0x38c>)
 8004a02:	fba3 2302 	umull	r2, r3, r3, r2
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	011e      	lsls	r6, r3, #4
 8004a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a0c:	461c      	mov	r4, r3
 8004a0e:	f04f 0500 	mov.w	r5, #0
 8004a12:	4622      	mov	r2, r4
 8004a14:	462b      	mov	r3, r5
 8004a16:	1891      	adds	r1, r2, r2
 8004a18:	6339      	str	r1, [r7, #48]	; 0x30
 8004a1a:	415b      	adcs	r3, r3
 8004a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a22:	1912      	adds	r2, r2, r4
 8004a24:	eb45 0303 	adc.w	r3, r5, r3
 8004a28:	f04f 0000 	mov.w	r0, #0
 8004a2c:	f04f 0100 	mov.w	r1, #0
 8004a30:	00d9      	lsls	r1, r3, #3
 8004a32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a36:	00d0      	lsls	r0, r2, #3
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	1911      	adds	r1, r2, r4
 8004a3e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a40:	416b      	adcs	r3, r5
 8004a42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	461a      	mov	r2, r3
 8004a4a:	f04f 0300 	mov.w	r3, #0
 8004a4e:	1891      	adds	r1, r2, r2
 8004a50:	62b9      	str	r1, [r7, #40]	; 0x28
 8004a52:	415b      	adcs	r3, r3
 8004a54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004a5e:	f7fc f805 	bl	8000a6c <__aeabi_uldivmod>
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	4b8c      	ldr	r3, [pc, #560]	; (8004c98 <UART_SetConfig+0x38c>)
 8004a68:	fba3 1302 	umull	r1, r3, r3, r2
 8004a6c:	095b      	lsrs	r3, r3, #5
 8004a6e:	2164      	movs	r1, #100	; 0x64
 8004a70:	fb01 f303 	mul.w	r3, r1, r3
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	3332      	adds	r3, #50	; 0x32
 8004a7a:	4a87      	ldr	r2, [pc, #540]	; (8004c98 <UART_SetConfig+0x38c>)
 8004a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a80:	095b      	lsrs	r3, r3, #5
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a88:	441e      	add	r6, r3
 8004a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f04f 0100 	mov.w	r1, #0
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	1894      	adds	r4, r2, r2
 8004a98:	623c      	str	r4, [r7, #32]
 8004a9a:	415b      	adcs	r3, r3
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aa2:	1812      	adds	r2, r2, r0
 8004aa4:	eb41 0303 	adc.w	r3, r1, r3
 8004aa8:	f04f 0400 	mov.w	r4, #0
 8004aac:	f04f 0500 	mov.w	r5, #0
 8004ab0:	00dd      	lsls	r5, r3, #3
 8004ab2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ab6:	00d4      	lsls	r4, r2, #3
 8004ab8:	4622      	mov	r2, r4
 8004aba:	462b      	mov	r3, r5
 8004abc:	1814      	adds	r4, r2, r0
 8004abe:	653c      	str	r4, [r7, #80]	; 0x50
 8004ac0:	414b      	adcs	r3, r1
 8004ac2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	1891      	adds	r1, r2, r2
 8004ad0:	61b9      	str	r1, [r7, #24]
 8004ad2:	415b      	adcs	r3, r3
 8004ad4:	61fb      	str	r3, [r7, #28]
 8004ad6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ada:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004ade:	f7fb ffc5 	bl	8000a6c <__aeabi_uldivmod>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	4b6c      	ldr	r3, [pc, #432]	; (8004c98 <UART_SetConfig+0x38c>)
 8004ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8004aec:	095b      	lsrs	r3, r3, #5
 8004aee:	2164      	movs	r1, #100	; 0x64
 8004af0:	fb01 f303 	mul.w	r3, r1, r3
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	3332      	adds	r3, #50	; 0x32
 8004afa:	4a67      	ldr	r2, [pc, #412]	; (8004c98 <UART_SetConfig+0x38c>)
 8004afc:	fba2 2303 	umull	r2, r3, r2, r3
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	f003 0207 	and.w	r2, r3, #7
 8004b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4432      	add	r2, r6
 8004b0c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b0e:	e0b9      	b.n	8004c84 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b12:	461c      	mov	r4, r3
 8004b14:	f04f 0500 	mov.w	r5, #0
 8004b18:	4622      	mov	r2, r4
 8004b1a:	462b      	mov	r3, r5
 8004b1c:	1891      	adds	r1, r2, r2
 8004b1e:	6139      	str	r1, [r7, #16]
 8004b20:	415b      	adcs	r3, r3
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b28:	1912      	adds	r2, r2, r4
 8004b2a:	eb45 0303 	adc.w	r3, r5, r3
 8004b2e:	f04f 0000 	mov.w	r0, #0
 8004b32:	f04f 0100 	mov.w	r1, #0
 8004b36:	00d9      	lsls	r1, r3, #3
 8004b38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b3c:	00d0      	lsls	r0, r2, #3
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	eb12 0804 	adds.w	r8, r2, r4
 8004b46:	eb43 0905 	adc.w	r9, r3, r5
 8004b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f04f 0100 	mov.w	r1, #0
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	008b      	lsls	r3, r1, #2
 8004b5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b62:	0082      	lsls	r2, r0, #2
 8004b64:	4640      	mov	r0, r8
 8004b66:	4649      	mov	r1, r9
 8004b68:	f7fb ff80 	bl	8000a6c <__aeabi_uldivmod>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4b49      	ldr	r3, [pc, #292]	; (8004c98 <UART_SetConfig+0x38c>)
 8004b72:	fba3 2302 	umull	r2, r3, r3, r2
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	011e      	lsls	r6, r3, #4
 8004b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f04f 0100 	mov.w	r1, #0
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	1894      	adds	r4, r2, r2
 8004b88:	60bc      	str	r4, [r7, #8]
 8004b8a:	415b      	adcs	r3, r3
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b92:	1812      	adds	r2, r2, r0
 8004b94:	eb41 0303 	adc.w	r3, r1, r3
 8004b98:	f04f 0400 	mov.w	r4, #0
 8004b9c:	f04f 0500 	mov.w	r5, #0
 8004ba0:	00dd      	lsls	r5, r3, #3
 8004ba2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ba6:	00d4      	lsls	r4, r2, #3
 8004ba8:	4622      	mov	r2, r4
 8004baa:	462b      	mov	r3, r5
 8004bac:	1814      	adds	r4, r2, r0
 8004bae:	64bc      	str	r4, [r7, #72]	; 0x48
 8004bb0:	414b      	adcs	r3, r1
 8004bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f04f 0100 	mov.w	r1, #0
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	008b      	lsls	r3, r1, #2
 8004bc8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bcc:	0082      	lsls	r2, r0, #2
 8004bce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004bd2:	f7fb ff4b 	bl	8000a6c <__aeabi_uldivmod>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4b2f      	ldr	r3, [pc, #188]	; (8004c98 <UART_SetConfig+0x38c>)
 8004bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8004be0:	095b      	lsrs	r3, r3, #5
 8004be2:	2164      	movs	r1, #100	; 0x64
 8004be4:	fb01 f303 	mul.w	r3, r1, r3
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	3332      	adds	r3, #50	; 0x32
 8004bee:	4a2a      	ldr	r2, [pc, #168]	; (8004c98 <UART_SetConfig+0x38c>)
 8004bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf4:	095b      	lsrs	r3, r3, #5
 8004bf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bfa:	441e      	add	r6, r3
 8004bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f04f 0100 	mov.w	r1, #0
 8004c04:	4602      	mov	r2, r0
 8004c06:	460b      	mov	r3, r1
 8004c08:	1894      	adds	r4, r2, r2
 8004c0a:	603c      	str	r4, [r7, #0]
 8004c0c:	415b      	adcs	r3, r3
 8004c0e:	607b      	str	r3, [r7, #4]
 8004c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c14:	1812      	adds	r2, r2, r0
 8004c16:	eb41 0303 	adc.w	r3, r1, r3
 8004c1a:	f04f 0400 	mov.w	r4, #0
 8004c1e:	f04f 0500 	mov.w	r5, #0
 8004c22:	00dd      	lsls	r5, r3, #3
 8004c24:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c28:	00d4      	lsls	r4, r2, #3
 8004c2a:	4622      	mov	r2, r4
 8004c2c:	462b      	mov	r3, r5
 8004c2e:	eb12 0a00 	adds.w	sl, r2, r0
 8004c32:	eb43 0b01 	adc.w	fp, r3, r1
 8004c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f04f 0100 	mov.w	r1, #0
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	008b      	lsls	r3, r1, #2
 8004c4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c4e:	0082      	lsls	r2, r0, #2
 8004c50:	4650      	mov	r0, sl
 8004c52:	4659      	mov	r1, fp
 8004c54:	f7fb ff0a 	bl	8000a6c <__aeabi_uldivmod>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4b0e      	ldr	r3, [pc, #56]	; (8004c98 <UART_SetConfig+0x38c>)
 8004c5e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c62:	095b      	lsrs	r3, r3, #5
 8004c64:	2164      	movs	r1, #100	; 0x64
 8004c66:	fb01 f303 	mul.w	r3, r1, r3
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	3332      	adds	r3, #50	; 0x32
 8004c70:	4a09      	ldr	r2, [pc, #36]	; (8004c98 <UART_SetConfig+0x38c>)
 8004c72:	fba2 2303 	umull	r2, r3, r2, r3
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	f003 020f 	and.w	r2, r3, #15
 8004c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4432      	add	r2, r6
 8004c82:	609a      	str	r2, [r3, #8]
}
 8004c84:	bf00      	nop
 8004c86:	377c      	adds	r7, #124	; 0x7c
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c8e:	bf00      	nop
 8004c90:	40011000 	.word	0x40011000
 8004c94:	40011400 	.word	0x40011400
 8004c98:	51eb851f 	.word	0x51eb851f

08004c9c <__errno>:
 8004c9c:	4b01      	ldr	r3, [pc, #4]	; (8004ca4 <__errno+0x8>)
 8004c9e:	6818      	ldr	r0, [r3, #0]
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	2000000c 	.word	0x2000000c

08004ca8 <__libc_init_array>:
 8004ca8:	b570      	push	{r4, r5, r6, lr}
 8004caa:	4d0d      	ldr	r5, [pc, #52]	; (8004ce0 <__libc_init_array+0x38>)
 8004cac:	4c0d      	ldr	r4, [pc, #52]	; (8004ce4 <__libc_init_array+0x3c>)
 8004cae:	1b64      	subs	r4, r4, r5
 8004cb0:	10a4      	asrs	r4, r4, #2
 8004cb2:	2600      	movs	r6, #0
 8004cb4:	42a6      	cmp	r6, r4
 8004cb6:	d109      	bne.n	8004ccc <__libc_init_array+0x24>
 8004cb8:	4d0b      	ldr	r5, [pc, #44]	; (8004ce8 <__libc_init_array+0x40>)
 8004cba:	4c0c      	ldr	r4, [pc, #48]	; (8004cec <__libc_init_array+0x44>)
 8004cbc:	f000 fc4e 	bl	800555c <_init>
 8004cc0:	1b64      	subs	r4, r4, r5
 8004cc2:	10a4      	asrs	r4, r4, #2
 8004cc4:	2600      	movs	r6, #0
 8004cc6:	42a6      	cmp	r6, r4
 8004cc8:	d105      	bne.n	8004cd6 <__libc_init_array+0x2e>
 8004cca:	bd70      	pop	{r4, r5, r6, pc}
 8004ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cd0:	4798      	blx	r3
 8004cd2:	3601      	adds	r6, #1
 8004cd4:	e7ee      	b.n	8004cb4 <__libc_init_array+0xc>
 8004cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cda:	4798      	blx	r3
 8004cdc:	3601      	adds	r6, #1
 8004cde:	e7f2      	b.n	8004cc6 <__libc_init_array+0x1e>
 8004ce0:	080055d0 	.word	0x080055d0
 8004ce4:	080055d0 	.word	0x080055d0
 8004ce8:	080055d0 	.word	0x080055d0
 8004cec:	080055d4 	.word	0x080055d4

08004cf0 <memset>:
 8004cf0:	4402      	add	r2, r0
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d100      	bne.n	8004cfa <memset+0xa>
 8004cf8:	4770      	bx	lr
 8004cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8004cfe:	e7f9      	b.n	8004cf4 <memset+0x4>

08004d00 <siprintf>:
 8004d00:	b40e      	push	{r1, r2, r3}
 8004d02:	b500      	push	{lr}
 8004d04:	b09c      	sub	sp, #112	; 0x70
 8004d06:	ab1d      	add	r3, sp, #116	; 0x74
 8004d08:	9002      	str	r0, [sp, #8]
 8004d0a:	9006      	str	r0, [sp, #24]
 8004d0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d10:	4809      	ldr	r0, [pc, #36]	; (8004d38 <siprintf+0x38>)
 8004d12:	9107      	str	r1, [sp, #28]
 8004d14:	9104      	str	r1, [sp, #16]
 8004d16:	4909      	ldr	r1, [pc, #36]	; (8004d3c <siprintf+0x3c>)
 8004d18:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d1c:	9105      	str	r1, [sp, #20]
 8004d1e:	6800      	ldr	r0, [r0, #0]
 8004d20:	9301      	str	r3, [sp, #4]
 8004d22:	a902      	add	r1, sp, #8
 8004d24:	f000 f868 	bl	8004df8 <_svfiprintf_r>
 8004d28:	9b02      	ldr	r3, [sp, #8]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	b01c      	add	sp, #112	; 0x70
 8004d30:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d34:	b003      	add	sp, #12
 8004d36:	4770      	bx	lr
 8004d38:	2000000c 	.word	0x2000000c
 8004d3c:	ffff0208 	.word	0xffff0208

08004d40 <__ssputs_r>:
 8004d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d44:	688e      	ldr	r6, [r1, #8]
 8004d46:	429e      	cmp	r6, r3
 8004d48:	4682      	mov	sl, r0
 8004d4a:	460c      	mov	r4, r1
 8004d4c:	4690      	mov	r8, r2
 8004d4e:	461f      	mov	r7, r3
 8004d50:	d838      	bhi.n	8004dc4 <__ssputs_r+0x84>
 8004d52:	898a      	ldrh	r2, [r1, #12]
 8004d54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d58:	d032      	beq.n	8004dc0 <__ssputs_r+0x80>
 8004d5a:	6825      	ldr	r5, [r4, #0]
 8004d5c:	6909      	ldr	r1, [r1, #16]
 8004d5e:	eba5 0901 	sub.w	r9, r5, r1
 8004d62:	6965      	ldr	r5, [r4, #20]
 8004d64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	444b      	add	r3, r9
 8004d70:	106d      	asrs	r5, r5, #1
 8004d72:	429d      	cmp	r5, r3
 8004d74:	bf38      	it	cc
 8004d76:	461d      	movcc	r5, r3
 8004d78:	0553      	lsls	r3, r2, #21
 8004d7a:	d531      	bpl.n	8004de0 <__ssputs_r+0xa0>
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	f000 fb47 	bl	8005410 <_malloc_r>
 8004d82:	4606      	mov	r6, r0
 8004d84:	b950      	cbnz	r0, 8004d9c <__ssputs_r+0x5c>
 8004d86:	230c      	movs	r3, #12
 8004d88:	f8ca 3000 	str.w	r3, [sl]
 8004d8c:	89a3      	ldrh	r3, [r4, #12]
 8004d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d92:	81a3      	strh	r3, [r4, #12]
 8004d94:	f04f 30ff 	mov.w	r0, #4294967295
 8004d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d9c:	6921      	ldr	r1, [r4, #16]
 8004d9e:	464a      	mov	r2, r9
 8004da0:	f000 fabe 	bl	8005320 <memcpy>
 8004da4:	89a3      	ldrh	r3, [r4, #12]
 8004da6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dae:	81a3      	strh	r3, [r4, #12]
 8004db0:	6126      	str	r6, [r4, #16]
 8004db2:	6165      	str	r5, [r4, #20]
 8004db4:	444e      	add	r6, r9
 8004db6:	eba5 0509 	sub.w	r5, r5, r9
 8004dba:	6026      	str	r6, [r4, #0]
 8004dbc:	60a5      	str	r5, [r4, #8]
 8004dbe:	463e      	mov	r6, r7
 8004dc0:	42be      	cmp	r6, r7
 8004dc2:	d900      	bls.n	8004dc6 <__ssputs_r+0x86>
 8004dc4:	463e      	mov	r6, r7
 8004dc6:	4632      	mov	r2, r6
 8004dc8:	6820      	ldr	r0, [r4, #0]
 8004dca:	4641      	mov	r1, r8
 8004dcc:	f000 fab6 	bl	800533c <memmove>
 8004dd0:	68a3      	ldr	r3, [r4, #8]
 8004dd2:	6822      	ldr	r2, [r4, #0]
 8004dd4:	1b9b      	subs	r3, r3, r6
 8004dd6:	4432      	add	r2, r6
 8004dd8:	60a3      	str	r3, [r4, #8]
 8004dda:	6022      	str	r2, [r4, #0]
 8004ddc:	2000      	movs	r0, #0
 8004dde:	e7db      	b.n	8004d98 <__ssputs_r+0x58>
 8004de0:	462a      	mov	r2, r5
 8004de2:	f000 fb6f 	bl	80054c4 <_realloc_r>
 8004de6:	4606      	mov	r6, r0
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d1e1      	bne.n	8004db0 <__ssputs_r+0x70>
 8004dec:	6921      	ldr	r1, [r4, #16]
 8004dee:	4650      	mov	r0, sl
 8004df0:	f000 fabe 	bl	8005370 <_free_r>
 8004df4:	e7c7      	b.n	8004d86 <__ssputs_r+0x46>
	...

08004df8 <_svfiprintf_r>:
 8004df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dfc:	4698      	mov	r8, r3
 8004dfe:	898b      	ldrh	r3, [r1, #12]
 8004e00:	061b      	lsls	r3, r3, #24
 8004e02:	b09d      	sub	sp, #116	; 0x74
 8004e04:	4607      	mov	r7, r0
 8004e06:	460d      	mov	r5, r1
 8004e08:	4614      	mov	r4, r2
 8004e0a:	d50e      	bpl.n	8004e2a <_svfiprintf_r+0x32>
 8004e0c:	690b      	ldr	r3, [r1, #16]
 8004e0e:	b963      	cbnz	r3, 8004e2a <_svfiprintf_r+0x32>
 8004e10:	2140      	movs	r1, #64	; 0x40
 8004e12:	f000 fafd 	bl	8005410 <_malloc_r>
 8004e16:	6028      	str	r0, [r5, #0]
 8004e18:	6128      	str	r0, [r5, #16]
 8004e1a:	b920      	cbnz	r0, 8004e26 <_svfiprintf_r+0x2e>
 8004e1c:	230c      	movs	r3, #12
 8004e1e:	603b      	str	r3, [r7, #0]
 8004e20:	f04f 30ff 	mov.w	r0, #4294967295
 8004e24:	e0d1      	b.n	8004fca <_svfiprintf_r+0x1d2>
 8004e26:	2340      	movs	r3, #64	; 0x40
 8004e28:	616b      	str	r3, [r5, #20]
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e2e:	2320      	movs	r3, #32
 8004e30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e34:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e38:	2330      	movs	r3, #48	; 0x30
 8004e3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004fe4 <_svfiprintf_r+0x1ec>
 8004e3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e42:	f04f 0901 	mov.w	r9, #1
 8004e46:	4623      	mov	r3, r4
 8004e48:	469a      	mov	sl, r3
 8004e4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e4e:	b10a      	cbz	r2, 8004e54 <_svfiprintf_r+0x5c>
 8004e50:	2a25      	cmp	r2, #37	; 0x25
 8004e52:	d1f9      	bne.n	8004e48 <_svfiprintf_r+0x50>
 8004e54:	ebba 0b04 	subs.w	fp, sl, r4
 8004e58:	d00b      	beq.n	8004e72 <_svfiprintf_r+0x7a>
 8004e5a:	465b      	mov	r3, fp
 8004e5c:	4622      	mov	r2, r4
 8004e5e:	4629      	mov	r1, r5
 8004e60:	4638      	mov	r0, r7
 8004e62:	f7ff ff6d 	bl	8004d40 <__ssputs_r>
 8004e66:	3001      	adds	r0, #1
 8004e68:	f000 80aa 	beq.w	8004fc0 <_svfiprintf_r+0x1c8>
 8004e6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e6e:	445a      	add	r2, fp
 8004e70:	9209      	str	r2, [sp, #36]	; 0x24
 8004e72:	f89a 3000 	ldrb.w	r3, [sl]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 80a2 	beq.w	8004fc0 <_svfiprintf_r+0x1c8>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e86:	f10a 0a01 	add.w	sl, sl, #1
 8004e8a:	9304      	str	r3, [sp, #16]
 8004e8c:	9307      	str	r3, [sp, #28]
 8004e8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e92:	931a      	str	r3, [sp, #104]	; 0x68
 8004e94:	4654      	mov	r4, sl
 8004e96:	2205      	movs	r2, #5
 8004e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e9c:	4851      	ldr	r0, [pc, #324]	; (8004fe4 <_svfiprintf_r+0x1ec>)
 8004e9e:	f7fb f9a7 	bl	80001f0 <memchr>
 8004ea2:	9a04      	ldr	r2, [sp, #16]
 8004ea4:	b9d8      	cbnz	r0, 8004ede <_svfiprintf_r+0xe6>
 8004ea6:	06d0      	lsls	r0, r2, #27
 8004ea8:	bf44      	itt	mi
 8004eaa:	2320      	movmi	r3, #32
 8004eac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eb0:	0711      	lsls	r1, r2, #28
 8004eb2:	bf44      	itt	mi
 8004eb4:	232b      	movmi	r3, #43	; 0x2b
 8004eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eba:	f89a 3000 	ldrb.w	r3, [sl]
 8004ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8004ec0:	d015      	beq.n	8004eee <_svfiprintf_r+0xf6>
 8004ec2:	9a07      	ldr	r2, [sp, #28]
 8004ec4:	4654      	mov	r4, sl
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	f04f 0c0a 	mov.w	ip, #10
 8004ecc:	4621      	mov	r1, r4
 8004ece:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ed2:	3b30      	subs	r3, #48	; 0x30
 8004ed4:	2b09      	cmp	r3, #9
 8004ed6:	d94e      	bls.n	8004f76 <_svfiprintf_r+0x17e>
 8004ed8:	b1b0      	cbz	r0, 8004f08 <_svfiprintf_r+0x110>
 8004eda:	9207      	str	r2, [sp, #28]
 8004edc:	e014      	b.n	8004f08 <_svfiprintf_r+0x110>
 8004ede:	eba0 0308 	sub.w	r3, r0, r8
 8004ee2:	fa09 f303 	lsl.w	r3, r9, r3
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	9304      	str	r3, [sp, #16]
 8004eea:	46a2      	mov	sl, r4
 8004eec:	e7d2      	b.n	8004e94 <_svfiprintf_r+0x9c>
 8004eee:	9b03      	ldr	r3, [sp, #12]
 8004ef0:	1d19      	adds	r1, r3, #4
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	9103      	str	r1, [sp, #12]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	bfbb      	ittet	lt
 8004efa:	425b      	neglt	r3, r3
 8004efc:	f042 0202 	orrlt.w	r2, r2, #2
 8004f00:	9307      	strge	r3, [sp, #28]
 8004f02:	9307      	strlt	r3, [sp, #28]
 8004f04:	bfb8      	it	lt
 8004f06:	9204      	strlt	r2, [sp, #16]
 8004f08:	7823      	ldrb	r3, [r4, #0]
 8004f0a:	2b2e      	cmp	r3, #46	; 0x2e
 8004f0c:	d10c      	bne.n	8004f28 <_svfiprintf_r+0x130>
 8004f0e:	7863      	ldrb	r3, [r4, #1]
 8004f10:	2b2a      	cmp	r3, #42	; 0x2a
 8004f12:	d135      	bne.n	8004f80 <_svfiprintf_r+0x188>
 8004f14:	9b03      	ldr	r3, [sp, #12]
 8004f16:	1d1a      	adds	r2, r3, #4
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	9203      	str	r2, [sp, #12]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	bfb8      	it	lt
 8004f20:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f24:	3402      	adds	r4, #2
 8004f26:	9305      	str	r3, [sp, #20]
 8004f28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004ff4 <_svfiprintf_r+0x1fc>
 8004f2c:	7821      	ldrb	r1, [r4, #0]
 8004f2e:	2203      	movs	r2, #3
 8004f30:	4650      	mov	r0, sl
 8004f32:	f7fb f95d 	bl	80001f0 <memchr>
 8004f36:	b140      	cbz	r0, 8004f4a <_svfiprintf_r+0x152>
 8004f38:	2340      	movs	r3, #64	; 0x40
 8004f3a:	eba0 000a 	sub.w	r0, r0, sl
 8004f3e:	fa03 f000 	lsl.w	r0, r3, r0
 8004f42:	9b04      	ldr	r3, [sp, #16]
 8004f44:	4303      	orrs	r3, r0
 8004f46:	3401      	adds	r4, #1
 8004f48:	9304      	str	r3, [sp, #16]
 8004f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f4e:	4826      	ldr	r0, [pc, #152]	; (8004fe8 <_svfiprintf_r+0x1f0>)
 8004f50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f54:	2206      	movs	r2, #6
 8004f56:	f7fb f94b 	bl	80001f0 <memchr>
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	d038      	beq.n	8004fd0 <_svfiprintf_r+0x1d8>
 8004f5e:	4b23      	ldr	r3, [pc, #140]	; (8004fec <_svfiprintf_r+0x1f4>)
 8004f60:	bb1b      	cbnz	r3, 8004faa <_svfiprintf_r+0x1b2>
 8004f62:	9b03      	ldr	r3, [sp, #12]
 8004f64:	3307      	adds	r3, #7
 8004f66:	f023 0307 	bic.w	r3, r3, #7
 8004f6a:	3308      	adds	r3, #8
 8004f6c:	9303      	str	r3, [sp, #12]
 8004f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f70:	4433      	add	r3, r6
 8004f72:	9309      	str	r3, [sp, #36]	; 0x24
 8004f74:	e767      	b.n	8004e46 <_svfiprintf_r+0x4e>
 8004f76:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f7a:	460c      	mov	r4, r1
 8004f7c:	2001      	movs	r0, #1
 8004f7e:	e7a5      	b.n	8004ecc <_svfiprintf_r+0xd4>
 8004f80:	2300      	movs	r3, #0
 8004f82:	3401      	adds	r4, #1
 8004f84:	9305      	str	r3, [sp, #20]
 8004f86:	4619      	mov	r1, r3
 8004f88:	f04f 0c0a 	mov.w	ip, #10
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f92:	3a30      	subs	r2, #48	; 0x30
 8004f94:	2a09      	cmp	r2, #9
 8004f96:	d903      	bls.n	8004fa0 <_svfiprintf_r+0x1a8>
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d0c5      	beq.n	8004f28 <_svfiprintf_r+0x130>
 8004f9c:	9105      	str	r1, [sp, #20]
 8004f9e:	e7c3      	b.n	8004f28 <_svfiprintf_r+0x130>
 8004fa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e7f0      	b.n	8004f8c <_svfiprintf_r+0x194>
 8004faa:	ab03      	add	r3, sp, #12
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	462a      	mov	r2, r5
 8004fb0:	4b0f      	ldr	r3, [pc, #60]	; (8004ff0 <_svfiprintf_r+0x1f8>)
 8004fb2:	a904      	add	r1, sp, #16
 8004fb4:	4638      	mov	r0, r7
 8004fb6:	f3af 8000 	nop.w
 8004fba:	1c42      	adds	r2, r0, #1
 8004fbc:	4606      	mov	r6, r0
 8004fbe:	d1d6      	bne.n	8004f6e <_svfiprintf_r+0x176>
 8004fc0:	89ab      	ldrh	r3, [r5, #12]
 8004fc2:	065b      	lsls	r3, r3, #25
 8004fc4:	f53f af2c 	bmi.w	8004e20 <_svfiprintf_r+0x28>
 8004fc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fca:	b01d      	add	sp, #116	; 0x74
 8004fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd0:	ab03      	add	r3, sp, #12
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	462a      	mov	r2, r5
 8004fd6:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <_svfiprintf_r+0x1f8>)
 8004fd8:	a904      	add	r1, sp, #16
 8004fda:	4638      	mov	r0, r7
 8004fdc:	f000 f87a 	bl	80050d4 <_printf_i>
 8004fe0:	e7eb      	b.n	8004fba <_svfiprintf_r+0x1c2>
 8004fe2:	bf00      	nop
 8004fe4:	08005594 	.word	0x08005594
 8004fe8:	0800559e 	.word	0x0800559e
 8004fec:	00000000 	.word	0x00000000
 8004ff0:	08004d41 	.word	0x08004d41
 8004ff4:	0800559a 	.word	0x0800559a

08004ff8 <_printf_common>:
 8004ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ffc:	4616      	mov	r6, r2
 8004ffe:	4699      	mov	r9, r3
 8005000:	688a      	ldr	r2, [r1, #8]
 8005002:	690b      	ldr	r3, [r1, #16]
 8005004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005008:	4293      	cmp	r3, r2
 800500a:	bfb8      	it	lt
 800500c:	4613      	movlt	r3, r2
 800500e:	6033      	str	r3, [r6, #0]
 8005010:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005014:	4607      	mov	r7, r0
 8005016:	460c      	mov	r4, r1
 8005018:	b10a      	cbz	r2, 800501e <_printf_common+0x26>
 800501a:	3301      	adds	r3, #1
 800501c:	6033      	str	r3, [r6, #0]
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	0699      	lsls	r1, r3, #26
 8005022:	bf42      	ittt	mi
 8005024:	6833      	ldrmi	r3, [r6, #0]
 8005026:	3302      	addmi	r3, #2
 8005028:	6033      	strmi	r3, [r6, #0]
 800502a:	6825      	ldr	r5, [r4, #0]
 800502c:	f015 0506 	ands.w	r5, r5, #6
 8005030:	d106      	bne.n	8005040 <_printf_common+0x48>
 8005032:	f104 0a19 	add.w	sl, r4, #25
 8005036:	68e3      	ldr	r3, [r4, #12]
 8005038:	6832      	ldr	r2, [r6, #0]
 800503a:	1a9b      	subs	r3, r3, r2
 800503c:	42ab      	cmp	r3, r5
 800503e:	dc26      	bgt.n	800508e <_printf_common+0x96>
 8005040:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005044:	1e13      	subs	r3, r2, #0
 8005046:	6822      	ldr	r2, [r4, #0]
 8005048:	bf18      	it	ne
 800504a:	2301      	movne	r3, #1
 800504c:	0692      	lsls	r2, r2, #26
 800504e:	d42b      	bmi.n	80050a8 <_printf_common+0xb0>
 8005050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005054:	4649      	mov	r1, r9
 8005056:	4638      	mov	r0, r7
 8005058:	47c0      	blx	r8
 800505a:	3001      	adds	r0, #1
 800505c:	d01e      	beq.n	800509c <_printf_common+0xa4>
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	68e5      	ldr	r5, [r4, #12]
 8005062:	6832      	ldr	r2, [r6, #0]
 8005064:	f003 0306 	and.w	r3, r3, #6
 8005068:	2b04      	cmp	r3, #4
 800506a:	bf08      	it	eq
 800506c:	1aad      	subeq	r5, r5, r2
 800506e:	68a3      	ldr	r3, [r4, #8]
 8005070:	6922      	ldr	r2, [r4, #16]
 8005072:	bf0c      	ite	eq
 8005074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005078:	2500      	movne	r5, #0
 800507a:	4293      	cmp	r3, r2
 800507c:	bfc4      	itt	gt
 800507e:	1a9b      	subgt	r3, r3, r2
 8005080:	18ed      	addgt	r5, r5, r3
 8005082:	2600      	movs	r6, #0
 8005084:	341a      	adds	r4, #26
 8005086:	42b5      	cmp	r5, r6
 8005088:	d11a      	bne.n	80050c0 <_printf_common+0xc8>
 800508a:	2000      	movs	r0, #0
 800508c:	e008      	b.n	80050a0 <_printf_common+0xa8>
 800508e:	2301      	movs	r3, #1
 8005090:	4652      	mov	r2, sl
 8005092:	4649      	mov	r1, r9
 8005094:	4638      	mov	r0, r7
 8005096:	47c0      	blx	r8
 8005098:	3001      	adds	r0, #1
 800509a:	d103      	bne.n	80050a4 <_printf_common+0xac>
 800509c:	f04f 30ff 	mov.w	r0, #4294967295
 80050a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a4:	3501      	adds	r5, #1
 80050a6:	e7c6      	b.n	8005036 <_printf_common+0x3e>
 80050a8:	18e1      	adds	r1, r4, r3
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	2030      	movs	r0, #48	; 0x30
 80050ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050b2:	4422      	add	r2, r4
 80050b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050bc:	3302      	adds	r3, #2
 80050be:	e7c7      	b.n	8005050 <_printf_common+0x58>
 80050c0:	2301      	movs	r3, #1
 80050c2:	4622      	mov	r2, r4
 80050c4:	4649      	mov	r1, r9
 80050c6:	4638      	mov	r0, r7
 80050c8:	47c0      	blx	r8
 80050ca:	3001      	adds	r0, #1
 80050cc:	d0e6      	beq.n	800509c <_printf_common+0xa4>
 80050ce:	3601      	adds	r6, #1
 80050d0:	e7d9      	b.n	8005086 <_printf_common+0x8e>
	...

080050d4 <_printf_i>:
 80050d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050d8:	460c      	mov	r4, r1
 80050da:	4691      	mov	r9, r2
 80050dc:	7e27      	ldrb	r7, [r4, #24]
 80050de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80050e0:	2f78      	cmp	r7, #120	; 0x78
 80050e2:	4680      	mov	r8, r0
 80050e4:	469a      	mov	sl, r3
 80050e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050ea:	d807      	bhi.n	80050fc <_printf_i+0x28>
 80050ec:	2f62      	cmp	r7, #98	; 0x62
 80050ee:	d80a      	bhi.n	8005106 <_printf_i+0x32>
 80050f0:	2f00      	cmp	r7, #0
 80050f2:	f000 80d8 	beq.w	80052a6 <_printf_i+0x1d2>
 80050f6:	2f58      	cmp	r7, #88	; 0x58
 80050f8:	f000 80a3 	beq.w	8005242 <_printf_i+0x16e>
 80050fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005100:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005104:	e03a      	b.n	800517c <_printf_i+0xa8>
 8005106:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800510a:	2b15      	cmp	r3, #21
 800510c:	d8f6      	bhi.n	80050fc <_printf_i+0x28>
 800510e:	a001      	add	r0, pc, #4	; (adr r0, 8005114 <_printf_i+0x40>)
 8005110:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005114:	0800516d 	.word	0x0800516d
 8005118:	08005181 	.word	0x08005181
 800511c:	080050fd 	.word	0x080050fd
 8005120:	080050fd 	.word	0x080050fd
 8005124:	080050fd 	.word	0x080050fd
 8005128:	080050fd 	.word	0x080050fd
 800512c:	08005181 	.word	0x08005181
 8005130:	080050fd 	.word	0x080050fd
 8005134:	080050fd 	.word	0x080050fd
 8005138:	080050fd 	.word	0x080050fd
 800513c:	080050fd 	.word	0x080050fd
 8005140:	0800528d 	.word	0x0800528d
 8005144:	080051b1 	.word	0x080051b1
 8005148:	0800526f 	.word	0x0800526f
 800514c:	080050fd 	.word	0x080050fd
 8005150:	080050fd 	.word	0x080050fd
 8005154:	080052af 	.word	0x080052af
 8005158:	080050fd 	.word	0x080050fd
 800515c:	080051b1 	.word	0x080051b1
 8005160:	080050fd 	.word	0x080050fd
 8005164:	080050fd 	.word	0x080050fd
 8005168:	08005277 	.word	0x08005277
 800516c:	680b      	ldr	r3, [r1, #0]
 800516e:	1d1a      	adds	r2, r3, #4
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	600a      	str	r2, [r1, #0]
 8005174:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800517c:	2301      	movs	r3, #1
 800517e:	e0a3      	b.n	80052c8 <_printf_i+0x1f4>
 8005180:	6825      	ldr	r5, [r4, #0]
 8005182:	6808      	ldr	r0, [r1, #0]
 8005184:	062e      	lsls	r6, r5, #24
 8005186:	f100 0304 	add.w	r3, r0, #4
 800518a:	d50a      	bpl.n	80051a2 <_printf_i+0xce>
 800518c:	6805      	ldr	r5, [r0, #0]
 800518e:	600b      	str	r3, [r1, #0]
 8005190:	2d00      	cmp	r5, #0
 8005192:	da03      	bge.n	800519c <_printf_i+0xc8>
 8005194:	232d      	movs	r3, #45	; 0x2d
 8005196:	426d      	negs	r5, r5
 8005198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800519c:	485e      	ldr	r0, [pc, #376]	; (8005318 <_printf_i+0x244>)
 800519e:	230a      	movs	r3, #10
 80051a0:	e019      	b.n	80051d6 <_printf_i+0x102>
 80051a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80051a6:	6805      	ldr	r5, [r0, #0]
 80051a8:	600b      	str	r3, [r1, #0]
 80051aa:	bf18      	it	ne
 80051ac:	b22d      	sxthne	r5, r5
 80051ae:	e7ef      	b.n	8005190 <_printf_i+0xbc>
 80051b0:	680b      	ldr	r3, [r1, #0]
 80051b2:	6825      	ldr	r5, [r4, #0]
 80051b4:	1d18      	adds	r0, r3, #4
 80051b6:	6008      	str	r0, [r1, #0]
 80051b8:	0628      	lsls	r0, r5, #24
 80051ba:	d501      	bpl.n	80051c0 <_printf_i+0xec>
 80051bc:	681d      	ldr	r5, [r3, #0]
 80051be:	e002      	b.n	80051c6 <_printf_i+0xf2>
 80051c0:	0669      	lsls	r1, r5, #25
 80051c2:	d5fb      	bpl.n	80051bc <_printf_i+0xe8>
 80051c4:	881d      	ldrh	r5, [r3, #0]
 80051c6:	4854      	ldr	r0, [pc, #336]	; (8005318 <_printf_i+0x244>)
 80051c8:	2f6f      	cmp	r7, #111	; 0x6f
 80051ca:	bf0c      	ite	eq
 80051cc:	2308      	moveq	r3, #8
 80051ce:	230a      	movne	r3, #10
 80051d0:	2100      	movs	r1, #0
 80051d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051d6:	6866      	ldr	r6, [r4, #4]
 80051d8:	60a6      	str	r6, [r4, #8]
 80051da:	2e00      	cmp	r6, #0
 80051dc:	bfa2      	ittt	ge
 80051de:	6821      	ldrge	r1, [r4, #0]
 80051e0:	f021 0104 	bicge.w	r1, r1, #4
 80051e4:	6021      	strge	r1, [r4, #0]
 80051e6:	b90d      	cbnz	r5, 80051ec <_printf_i+0x118>
 80051e8:	2e00      	cmp	r6, #0
 80051ea:	d04d      	beq.n	8005288 <_printf_i+0x1b4>
 80051ec:	4616      	mov	r6, r2
 80051ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80051f2:	fb03 5711 	mls	r7, r3, r1, r5
 80051f6:	5dc7      	ldrb	r7, [r0, r7]
 80051f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051fc:	462f      	mov	r7, r5
 80051fe:	42bb      	cmp	r3, r7
 8005200:	460d      	mov	r5, r1
 8005202:	d9f4      	bls.n	80051ee <_printf_i+0x11a>
 8005204:	2b08      	cmp	r3, #8
 8005206:	d10b      	bne.n	8005220 <_printf_i+0x14c>
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	07df      	lsls	r7, r3, #31
 800520c:	d508      	bpl.n	8005220 <_printf_i+0x14c>
 800520e:	6923      	ldr	r3, [r4, #16]
 8005210:	6861      	ldr	r1, [r4, #4]
 8005212:	4299      	cmp	r1, r3
 8005214:	bfde      	ittt	le
 8005216:	2330      	movle	r3, #48	; 0x30
 8005218:	f806 3c01 	strble.w	r3, [r6, #-1]
 800521c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005220:	1b92      	subs	r2, r2, r6
 8005222:	6122      	str	r2, [r4, #16]
 8005224:	f8cd a000 	str.w	sl, [sp]
 8005228:	464b      	mov	r3, r9
 800522a:	aa03      	add	r2, sp, #12
 800522c:	4621      	mov	r1, r4
 800522e:	4640      	mov	r0, r8
 8005230:	f7ff fee2 	bl	8004ff8 <_printf_common>
 8005234:	3001      	adds	r0, #1
 8005236:	d14c      	bne.n	80052d2 <_printf_i+0x1fe>
 8005238:	f04f 30ff 	mov.w	r0, #4294967295
 800523c:	b004      	add	sp, #16
 800523e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005242:	4835      	ldr	r0, [pc, #212]	; (8005318 <_printf_i+0x244>)
 8005244:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	680e      	ldr	r6, [r1, #0]
 800524c:	061f      	lsls	r7, r3, #24
 800524e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005252:	600e      	str	r6, [r1, #0]
 8005254:	d514      	bpl.n	8005280 <_printf_i+0x1ac>
 8005256:	07d9      	lsls	r1, r3, #31
 8005258:	bf44      	itt	mi
 800525a:	f043 0320 	orrmi.w	r3, r3, #32
 800525e:	6023      	strmi	r3, [r4, #0]
 8005260:	b91d      	cbnz	r5, 800526a <_printf_i+0x196>
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	f023 0320 	bic.w	r3, r3, #32
 8005268:	6023      	str	r3, [r4, #0]
 800526a:	2310      	movs	r3, #16
 800526c:	e7b0      	b.n	80051d0 <_printf_i+0xfc>
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	f043 0320 	orr.w	r3, r3, #32
 8005274:	6023      	str	r3, [r4, #0]
 8005276:	2378      	movs	r3, #120	; 0x78
 8005278:	4828      	ldr	r0, [pc, #160]	; (800531c <_printf_i+0x248>)
 800527a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800527e:	e7e3      	b.n	8005248 <_printf_i+0x174>
 8005280:	065e      	lsls	r6, r3, #25
 8005282:	bf48      	it	mi
 8005284:	b2ad      	uxthmi	r5, r5
 8005286:	e7e6      	b.n	8005256 <_printf_i+0x182>
 8005288:	4616      	mov	r6, r2
 800528a:	e7bb      	b.n	8005204 <_printf_i+0x130>
 800528c:	680b      	ldr	r3, [r1, #0]
 800528e:	6826      	ldr	r6, [r4, #0]
 8005290:	6960      	ldr	r0, [r4, #20]
 8005292:	1d1d      	adds	r5, r3, #4
 8005294:	600d      	str	r5, [r1, #0]
 8005296:	0635      	lsls	r5, r6, #24
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	d501      	bpl.n	80052a0 <_printf_i+0x1cc>
 800529c:	6018      	str	r0, [r3, #0]
 800529e:	e002      	b.n	80052a6 <_printf_i+0x1d2>
 80052a0:	0671      	lsls	r1, r6, #25
 80052a2:	d5fb      	bpl.n	800529c <_printf_i+0x1c8>
 80052a4:	8018      	strh	r0, [r3, #0]
 80052a6:	2300      	movs	r3, #0
 80052a8:	6123      	str	r3, [r4, #16]
 80052aa:	4616      	mov	r6, r2
 80052ac:	e7ba      	b.n	8005224 <_printf_i+0x150>
 80052ae:	680b      	ldr	r3, [r1, #0]
 80052b0:	1d1a      	adds	r2, r3, #4
 80052b2:	600a      	str	r2, [r1, #0]
 80052b4:	681e      	ldr	r6, [r3, #0]
 80052b6:	6862      	ldr	r2, [r4, #4]
 80052b8:	2100      	movs	r1, #0
 80052ba:	4630      	mov	r0, r6
 80052bc:	f7fa ff98 	bl	80001f0 <memchr>
 80052c0:	b108      	cbz	r0, 80052c6 <_printf_i+0x1f2>
 80052c2:	1b80      	subs	r0, r0, r6
 80052c4:	6060      	str	r0, [r4, #4]
 80052c6:	6863      	ldr	r3, [r4, #4]
 80052c8:	6123      	str	r3, [r4, #16]
 80052ca:	2300      	movs	r3, #0
 80052cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052d0:	e7a8      	b.n	8005224 <_printf_i+0x150>
 80052d2:	6923      	ldr	r3, [r4, #16]
 80052d4:	4632      	mov	r2, r6
 80052d6:	4649      	mov	r1, r9
 80052d8:	4640      	mov	r0, r8
 80052da:	47d0      	blx	sl
 80052dc:	3001      	adds	r0, #1
 80052de:	d0ab      	beq.n	8005238 <_printf_i+0x164>
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	079b      	lsls	r3, r3, #30
 80052e4:	d413      	bmi.n	800530e <_printf_i+0x23a>
 80052e6:	68e0      	ldr	r0, [r4, #12]
 80052e8:	9b03      	ldr	r3, [sp, #12]
 80052ea:	4298      	cmp	r0, r3
 80052ec:	bfb8      	it	lt
 80052ee:	4618      	movlt	r0, r3
 80052f0:	e7a4      	b.n	800523c <_printf_i+0x168>
 80052f2:	2301      	movs	r3, #1
 80052f4:	4632      	mov	r2, r6
 80052f6:	4649      	mov	r1, r9
 80052f8:	4640      	mov	r0, r8
 80052fa:	47d0      	blx	sl
 80052fc:	3001      	adds	r0, #1
 80052fe:	d09b      	beq.n	8005238 <_printf_i+0x164>
 8005300:	3501      	adds	r5, #1
 8005302:	68e3      	ldr	r3, [r4, #12]
 8005304:	9903      	ldr	r1, [sp, #12]
 8005306:	1a5b      	subs	r3, r3, r1
 8005308:	42ab      	cmp	r3, r5
 800530a:	dcf2      	bgt.n	80052f2 <_printf_i+0x21e>
 800530c:	e7eb      	b.n	80052e6 <_printf_i+0x212>
 800530e:	2500      	movs	r5, #0
 8005310:	f104 0619 	add.w	r6, r4, #25
 8005314:	e7f5      	b.n	8005302 <_printf_i+0x22e>
 8005316:	bf00      	nop
 8005318:	080055a5 	.word	0x080055a5
 800531c:	080055b6 	.word	0x080055b6

08005320 <memcpy>:
 8005320:	440a      	add	r2, r1
 8005322:	4291      	cmp	r1, r2
 8005324:	f100 33ff 	add.w	r3, r0, #4294967295
 8005328:	d100      	bne.n	800532c <memcpy+0xc>
 800532a:	4770      	bx	lr
 800532c:	b510      	push	{r4, lr}
 800532e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005332:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005336:	4291      	cmp	r1, r2
 8005338:	d1f9      	bne.n	800532e <memcpy+0xe>
 800533a:	bd10      	pop	{r4, pc}

0800533c <memmove>:
 800533c:	4288      	cmp	r0, r1
 800533e:	b510      	push	{r4, lr}
 8005340:	eb01 0402 	add.w	r4, r1, r2
 8005344:	d902      	bls.n	800534c <memmove+0x10>
 8005346:	4284      	cmp	r4, r0
 8005348:	4623      	mov	r3, r4
 800534a:	d807      	bhi.n	800535c <memmove+0x20>
 800534c:	1e43      	subs	r3, r0, #1
 800534e:	42a1      	cmp	r1, r4
 8005350:	d008      	beq.n	8005364 <memmove+0x28>
 8005352:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005356:	f803 2f01 	strb.w	r2, [r3, #1]!
 800535a:	e7f8      	b.n	800534e <memmove+0x12>
 800535c:	4402      	add	r2, r0
 800535e:	4601      	mov	r1, r0
 8005360:	428a      	cmp	r2, r1
 8005362:	d100      	bne.n	8005366 <memmove+0x2a>
 8005364:	bd10      	pop	{r4, pc}
 8005366:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800536a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800536e:	e7f7      	b.n	8005360 <memmove+0x24>

08005370 <_free_r>:
 8005370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005372:	2900      	cmp	r1, #0
 8005374:	d048      	beq.n	8005408 <_free_r+0x98>
 8005376:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800537a:	9001      	str	r0, [sp, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	f1a1 0404 	sub.w	r4, r1, #4
 8005382:	bfb8      	it	lt
 8005384:	18e4      	addlt	r4, r4, r3
 8005386:	f000 f8d3 	bl	8005530 <__malloc_lock>
 800538a:	4a20      	ldr	r2, [pc, #128]	; (800540c <_free_r+0x9c>)
 800538c:	9801      	ldr	r0, [sp, #4]
 800538e:	6813      	ldr	r3, [r2, #0]
 8005390:	4615      	mov	r5, r2
 8005392:	b933      	cbnz	r3, 80053a2 <_free_r+0x32>
 8005394:	6063      	str	r3, [r4, #4]
 8005396:	6014      	str	r4, [r2, #0]
 8005398:	b003      	add	sp, #12
 800539a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800539e:	f000 b8cd 	b.w	800553c <__malloc_unlock>
 80053a2:	42a3      	cmp	r3, r4
 80053a4:	d90b      	bls.n	80053be <_free_r+0x4e>
 80053a6:	6821      	ldr	r1, [r4, #0]
 80053a8:	1862      	adds	r2, r4, r1
 80053aa:	4293      	cmp	r3, r2
 80053ac:	bf04      	itt	eq
 80053ae:	681a      	ldreq	r2, [r3, #0]
 80053b0:	685b      	ldreq	r3, [r3, #4]
 80053b2:	6063      	str	r3, [r4, #4]
 80053b4:	bf04      	itt	eq
 80053b6:	1852      	addeq	r2, r2, r1
 80053b8:	6022      	streq	r2, [r4, #0]
 80053ba:	602c      	str	r4, [r5, #0]
 80053bc:	e7ec      	b.n	8005398 <_free_r+0x28>
 80053be:	461a      	mov	r2, r3
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	b10b      	cbz	r3, 80053c8 <_free_r+0x58>
 80053c4:	42a3      	cmp	r3, r4
 80053c6:	d9fa      	bls.n	80053be <_free_r+0x4e>
 80053c8:	6811      	ldr	r1, [r2, #0]
 80053ca:	1855      	adds	r5, r2, r1
 80053cc:	42a5      	cmp	r5, r4
 80053ce:	d10b      	bne.n	80053e8 <_free_r+0x78>
 80053d0:	6824      	ldr	r4, [r4, #0]
 80053d2:	4421      	add	r1, r4
 80053d4:	1854      	adds	r4, r2, r1
 80053d6:	42a3      	cmp	r3, r4
 80053d8:	6011      	str	r1, [r2, #0]
 80053da:	d1dd      	bne.n	8005398 <_free_r+0x28>
 80053dc:	681c      	ldr	r4, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	6053      	str	r3, [r2, #4]
 80053e2:	4421      	add	r1, r4
 80053e4:	6011      	str	r1, [r2, #0]
 80053e6:	e7d7      	b.n	8005398 <_free_r+0x28>
 80053e8:	d902      	bls.n	80053f0 <_free_r+0x80>
 80053ea:	230c      	movs	r3, #12
 80053ec:	6003      	str	r3, [r0, #0]
 80053ee:	e7d3      	b.n	8005398 <_free_r+0x28>
 80053f0:	6825      	ldr	r5, [r4, #0]
 80053f2:	1961      	adds	r1, r4, r5
 80053f4:	428b      	cmp	r3, r1
 80053f6:	bf04      	itt	eq
 80053f8:	6819      	ldreq	r1, [r3, #0]
 80053fa:	685b      	ldreq	r3, [r3, #4]
 80053fc:	6063      	str	r3, [r4, #4]
 80053fe:	bf04      	itt	eq
 8005400:	1949      	addeq	r1, r1, r5
 8005402:	6021      	streq	r1, [r4, #0]
 8005404:	6054      	str	r4, [r2, #4]
 8005406:	e7c7      	b.n	8005398 <_free_r+0x28>
 8005408:	b003      	add	sp, #12
 800540a:	bd30      	pop	{r4, r5, pc}
 800540c:	200004b0 	.word	0x200004b0

08005410 <_malloc_r>:
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	1ccd      	adds	r5, r1, #3
 8005414:	f025 0503 	bic.w	r5, r5, #3
 8005418:	3508      	adds	r5, #8
 800541a:	2d0c      	cmp	r5, #12
 800541c:	bf38      	it	cc
 800541e:	250c      	movcc	r5, #12
 8005420:	2d00      	cmp	r5, #0
 8005422:	4606      	mov	r6, r0
 8005424:	db01      	blt.n	800542a <_malloc_r+0x1a>
 8005426:	42a9      	cmp	r1, r5
 8005428:	d903      	bls.n	8005432 <_malloc_r+0x22>
 800542a:	230c      	movs	r3, #12
 800542c:	6033      	str	r3, [r6, #0]
 800542e:	2000      	movs	r0, #0
 8005430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005432:	f000 f87d 	bl	8005530 <__malloc_lock>
 8005436:	4921      	ldr	r1, [pc, #132]	; (80054bc <_malloc_r+0xac>)
 8005438:	680a      	ldr	r2, [r1, #0]
 800543a:	4614      	mov	r4, r2
 800543c:	b99c      	cbnz	r4, 8005466 <_malloc_r+0x56>
 800543e:	4f20      	ldr	r7, [pc, #128]	; (80054c0 <_malloc_r+0xb0>)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	b923      	cbnz	r3, 800544e <_malloc_r+0x3e>
 8005444:	4621      	mov	r1, r4
 8005446:	4630      	mov	r0, r6
 8005448:	f000 f862 	bl	8005510 <_sbrk_r>
 800544c:	6038      	str	r0, [r7, #0]
 800544e:	4629      	mov	r1, r5
 8005450:	4630      	mov	r0, r6
 8005452:	f000 f85d 	bl	8005510 <_sbrk_r>
 8005456:	1c43      	adds	r3, r0, #1
 8005458:	d123      	bne.n	80054a2 <_malloc_r+0x92>
 800545a:	230c      	movs	r3, #12
 800545c:	6033      	str	r3, [r6, #0]
 800545e:	4630      	mov	r0, r6
 8005460:	f000 f86c 	bl	800553c <__malloc_unlock>
 8005464:	e7e3      	b.n	800542e <_malloc_r+0x1e>
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	1b5b      	subs	r3, r3, r5
 800546a:	d417      	bmi.n	800549c <_malloc_r+0x8c>
 800546c:	2b0b      	cmp	r3, #11
 800546e:	d903      	bls.n	8005478 <_malloc_r+0x68>
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	441c      	add	r4, r3
 8005474:	6025      	str	r5, [r4, #0]
 8005476:	e004      	b.n	8005482 <_malloc_r+0x72>
 8005478:	6863      	ldr	r3, [r4, #4]
 800547a:	42a2      	cmp	r2, r4
 800547c:	bf0c      	ite	eq
 800547e:	600b      	streq	r3, [r1, #0]
 8005480:	6053      	strne	r3, [r2, #4]
 8005482:	4630      	mov	r0, r6
 8005484:	f000 f85a 	bl	800553c <__malloc_unlock>
 8005488:	f104 000b 	add.w	r0, r4, #11
 800548c:	1d23      	adds	r3, r4, #4
 800548e:	f020 0007 	bic.w	r0, r0, #7
 8005492:	1ac2      	subs	r2, r0, r3
 8005494:	d0cc      	beq.n	8005430 <_malloc_r+0x20>
 8005496:	1a1b      	subs	r3, r3, r0
 8005498:	50a3      	str	r3, [r4, r2]
 800549a:	e7c9      	b.n	8005430 <_malloc_r+0x20>
 800549c:	4622      	mov	r2, r4
 800549e:	6864      	ldr	r4, [r4, #4]
 80054a0:	e7cc      	b.n	800543c <_malloc_r+0x2c>
 80054a2:	1cc4      	adds	r4, r0, #3
 80054a4:	f024 0403 	bic.w	r4, r4, #3
 80054a8:	42a0      	cmp	r0, r4
 80054aa:	d0e3      	beq.n	8005474 <_malloc_r+0x64>
 80054ac:	1a21      	subs	r1, r4, r0
 80054ae:	4630      	mov	r0, r6
 80054b0:	f000 f82e 	bl	8005510 <_sbrk_r>
 80054b4:	3001      	adds	r0, #1
 80054b6:	d1dd      	bne.n	8005474 <_malloc_r+0x64>
 80054b8:	e7cf      	b.n	800545a <_malloc_r+0x4a>
 80054ba:	bf00      	nop
 80054bc:	200004b0 	.word	0x200004b0
 80054c0:	200004b4 	.word	0x200004b4

080054c4 <_realloc_r>:
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c6:	4607      	mov	r7, r0
 80054c8:	4614      	mov	r4, r2
 80054ca:	460e      	mov	r6, r1
 80054cc:	b921      	cbnz	r1, 80054d8 <_realloc_r+0x14>
 80054ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80054d2:	4611      	mov	r1, r2
 80054d4:	f7ff bf9c 	b.w	8005410 <_malloc_r>
 80054d8:	b922      	cbnz	r2, 80054e4 <_realloc_r+0x20>
 80054da:	f7ff ff49 	bl	8005370 <_free_r>
 80054de:	4625      	mov	r5, r4
 80054e0:	4628      	mov	r0, r5
 80054e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054e4:	f000 f830 	bl	8005548 <_malloc_usable_size_r>
 80054e8:	42a0      	cmp	r0, r4
 80054ea:	d20f      	bcs.n	800550c <_realloc_r+0x48>
 80054ec:	4621      	mov	r1, r4
 80054ee:	4638      	mov	r0, r7
 80054f0:	f7ff ff8e 	bl	8005410 <_malloc_r>
 80054f4:	4605      	mov	r5, r0
 80054f6:	2800      	cmp	r0, #0
 80054f8:	d0f2      	beq.n	80054e0 <_realloc_r+0x1c>
 80054fa:	4631      	mov	r1, r6
 80054fc:	4622      	mov	r2, r4
 80054fe:	f7ff ff0f 	bl	8005320 <memcpy>
 8005502:	4631      	mov	r1, r6
 8005504:	4638      	mov	r0, r7
 8005506:	f7ff ff33 	bl	8005370 <_free_r>
 800550a:	e7e9      	b.n	80054e0 <_realloc_r+0x1c>
 800550c:	4635      	mov	r5, r6
 800550e:	e7e7      	b.n	80054e0 <_realloc_r+0x1c>

08005510 <_sbrk_r>:
 8005510:	b538      	push	{r3, r4, r5, lr}
 8005512:	4d06      	ldr	r5, [pc, #24]	; (800552c <_sbrk_r+0x1c>)
 8005514:	2300      	movs	r3, #0
 8005516:	4604      	mov	r4, r0
 8005518:	4608      	mov	r0, r1
 800551a:	602b      	str	r3, [r5, #0]
 800551c:	f7fc f9ba 	bl	8001894 <_sbrk>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d102      	bne.n	800552a <_sbrk_r+0x1a>
 8005524:	682b      	ldr	r3, [r5, #0]
 8005526:	b103      	cbz	r3, 800552a <_sbrk_r+0x1a>
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	200005e8 	.word	0x200005e8

08005530 <__malloc_lock>:
 8005530:	4801      	ldr	r0, [pc, #4]	; (8005538 <__malloc_lock+0x8>)
 8005532:	f000 b811 	b.w	8005558 <__retarget_lock_acquire_recursive>
 8005536:	bf00      	nop
 8005538:	200005f0 	.word	0x200005f0

0800553c <__malloc_unlock>:
 800553c:	4801      	ldr	r0, [pc, #4]	; (8005544 <__malloc_unlock+0x8>)
 800553e:	f000 b80c 	b.w	800555a <__retarget_lock_release_recursive>
 8005542:	bf00      	nop
 8005544:	200005f0 	.word	0x200005f0

08005548 <_malloc_usable_size_r>:
 8005548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800554c:	1f18      	subs	r0, r3, #4
 800554e:	2b00      	cmp	r3, #0
 8005550:	bfbc      	itt	lt
 8005552:	580b      	ldrlt	r3, [r1, r0]
 8005554:	18c0      	addlt	r0, r0, r3
 8005556:	4770      	bx	lr

08005558 <__retarget_lock_acquire_recursive>:
 8005558:	4770      	bx	lr

0800555a <__retarget_lock_release_recursive>:
 800555a:	4770      	bx	lr

0800555c <_init>:
 800555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555e:	bf00      	nop
 8005560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005562:	bc08      	pop	{r3}
 8005564:	469e      	mov	lr, r3
 8005566:	4770      	bx	lr

08005568 <_fini>:
 8005568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556a:	bf00      	nop
 800556c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556e:	bc08      	pop	{r3}
 8005570:	469e      	mov	lr, r3
 8005572:	4770      	bx	lr
